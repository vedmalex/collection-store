---
description: "Backup verification and recovery procedures for git workflow"
globs: ["**/*"]
alwaysApply: false
---

# BACKUP VERIFICATION AND RECOVERY

> **TL;DR:** Comprehensive backup verification and recovery procedures to ensure safe development and quick recovery from issues.

## üîí BACKUP VERIFICATION WORKFLOW

```mermaid
graph TD
    Start["Start Task"] --> CheckGit["Check Git Status"]
    CheckGit --> Clean{"Working Tree<br>Clean?"}
    Clean -->|No| Stash["Stash Changes"]
    Clean -->|Yes| CreateBackup["Create Backup Branch"]
    Stash --> CreateBackup

    CreateBackup --> VerifyBackup["Verify Backup"]
    VerifyBackup --> TagBackup["Tag Backup Point"]
    TagBackup --> ProceedWork["Proceed with Work"]

    ProceedWork --> CheckPoint["Regular Checkpoints"]
    CheckPoint --> VerifyIntegrity["Verify Integrity"]
```

## üìã BACKUP VERIFICATION RULES

### Rule #38: Pre-Task Backup Verification
- **When**: Before starting any Level 3-4 task or risky changes
- **What**: Verify git status, create backup branch, tag stable point
- **Purpose**: Ensure safe rollback point exists

### Rule #39: Regular Backup Integrity Checks
- **When**: Daily for active development, weekly for stable branches
- **What**: Verify backup branches exist and are accessible
- **Purpose**: Ensure backups are valid when needed

### Rule #40: Automated Recovery Procedures
- **When**: When issues are detected or rollback is needed
- **What**: Standardized recovery procedures with verification
- **Purpose**: Quick and safe recovery from problems

## üéØ PRE-TASK BACKUP PROCEDURE

### Step 1: Git Status Verification
```bash
# Check current git status
git status

# Expected: Clean working tree or known changes
# If unexpected changes exist, investigate before proceeding
```

### Step 2: Working Tree Cleanup
```bash
# If working tree is dirty, stash changes
git stash push -m "Pre-backup stash: $(date)"

# Verify working tree is now clean
git status
# Expected: "nothing to commit, working tree clean"
```

### Step 3: Backup Branch Creation
```bash
# Ensure we're on main branch
git checkout main
git pull origin main

# Create backup branch with timestamp
BACKUP_NAME="backup/pre-$(date +%Y%m%d-%H%M)-$(git rev-parse --short HEAD)"
git checkout -b "$BACKUP_NAME"
git push origin "$BACKUP_NAME"

# Return to main
git checkout main
```

### Step 4: Backup Verification
```bash
# Verify backup branch exists locally
git branch | grep "backup/pre-$(date +%Y%m%d)"

# Verify backup branch exists remotely
git ls-remote origin | grep "backup/pre-$(date +%Y%m%d)"

# Verify backup branch content matches main
git diff main "$BACKUP_NAME"
# Expected: No differences
```

### Step 5: Tag Creation
```bash
# Create annotated tag for backup point
TAG_NAME="backup-$(date +%Y%m%d-%H%M)"
git tag -a "$TAG_NAME" -m "Backup before task: [TASK-ID]"
git push origin "$TAG_NAME"
```

## üîç BACKUP INTEGRITY VERIFICATION

### Daily Verification Script:
```bash
#!/bin/bash
# daily-backup-check.sh

echo "=== Daily Backup Integrity Check ==="
echo "Date: $(date)"

# Check for recent backup branches
echo "Recent backup branches:"
git branch -r | grep "backup/" | tail -5

# Verify backup branches are accessible
for branch in $(git branch -r | grep "backup/" | tail -3); do
    echo "Checking $branch..."
    git show "$branch" --stat > /dev/null
    if [ $? -eq 0 ]; then
        echo "‚úÖ $branch is accessible"
    else
        echo "‚ùå $branch is NOT accessible"
    fi
done

# Check backup tags
echo "Recent backup tags:"
git tag | grep "backup-" | tail -5

# Verify disk space for git objects
echo "Git repository size:"
du -sh .git/
```

### Weekly Deep Verification:
```bash
#!/bin/bash
# weekly-backup-verification.sh

echo "=== Weekly Deep Backup Verification ==="

# Verify all backup branches
for branch in $(git branch -r | grep "backup/"); do
    echo "Deep checking $branch..."

    # Check branch integrity
    git fsck --connectivity-only "$branch"

    # Verify branch can be checked out
    git checkout "$branch" --quiet
    if [ $? -eq 0 ]; then
        echo "‚úÖ $branch checkout successful"
        git checkout main --quiet
    else
        echo "‚ùå $branch checkout failed"
    fi
done

# Clean up old backup branches (older than 30 days)
echo "Cleaning up old backup branches..."
git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/backup/ | \
while read branch date; do
    if [[ $(date -d "$date" +%s) -lt $(date -d "30 days ago" +%s) ]]; then
        echo "Archiving old backup: $branch"
        # Archive instead of delete for safety
        git tag "archived-$(basename $branch)" "$branch"
        git push origin "archived-$(basename $branch)"
    fi
done
```

## üö® RECOVERY PROCEDURES

### Emergency Rollback to Backup:
```bash
#!/bin/bash
# emergency-rollback.sh

BACKUP_BRANCH="$1"
if [ -z "$BACKUP_BRANCH" ]; then
    echo "Usage: emergency-rollback.sh <backup-branch-name>"
    echo "Available backups:"
    git branch -r | grep "backup/"
    exit 1
fi

echo "=== EMERGENCY ROLLBACK PROCEDURE ==="
echo "Rolling back to: $BACKUP_BRANCH"
echo "Current HEAD: $(git rev-parse HEAD)"

# Confirm rollback
read -p "Are you sure you want to rollback? (yes/no): " confirm
if [ "$confirm" != "yes" ]; then
    echo "Rollback cancelled"
    exit 1
fi

# Create emergency backup of current state
EMERGENCY_BACKUP="emergency-backup-$(date +%Y%m%d-%H%M%S)"
git checkout -b "$EMERGENCY_BACKUP"
git push origin "$EMERGENCY_BACKUP"
echo "Current state backed up to: $EMERGENCY_BACKUP"

# Perform rollback
git checkout main
git reset --hard "origin/$BACKUP_BRANCH"
git push --force-with-lease origin main

echo "‚úÖ Rollback completed"
echo "Emergency backup available at: $EMERGENCY_BACKUP"
```

### Selective File Recovery:
```bash
#!/bin/bash
# recover-file.sh

BACKUP_BRANCH="$1"
FILE_PATH="$2"

if [ -z "$BACKUP_BRANCH" ] || [ -z "$FILE_PATH" ]; then
    echo "Usage: recover-file.sh <backup-branch> <file-path>"
    exit 1
fi

echo "Recovering $FILE_PATH from $BACKUP_BRANCH"

# Verify file exists in backup
git show "$BACKUP_BRANCH:$FILE_PATH" > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "‚ùå File not found in backup branch"
    exit 1
fi

# Create backup of current file
if [ -f "$FILE_PATH" ]; then
    cp "$FILE_PATH" "$FILE_PATH.backup-$(date +%Y%m%d-%H%M%S)"
    echo "Current file backed up"
fi

# Recover file from backup
git show "$BACKUP_BRANCH:$FILE_PATH" > "$FILE_PATH"
echo "‚úÖ File recovered from backup"
```

## üìä BACKUP MONITORING AND ALERTS

### Backup Health Metrics:
```bash
#!/bin/bash
# backup-health-metrics.sh

echo "=== Backup Health Report ==="

# Count backup branches
BACKUP_COUNT=$(git branch -r | grep -c "backup/")
echo "Total backup branches: $BACKUP_COUNT"

# Check backup frequency
RECENT_BACKUPS=$(git branch -r | grep "backup/" | xargs -I {} git log --format="%ci" -1 {} | sort -r | head -5)
echo "Recent backup dates:"
echo "$RECENT_BACKUPS"

# Check backup size
BACKUP_SIZE=$(git for-each-ref --format='%(objectsize)' refs/remotes/origin/backup/ | awk '{sum+=$1} END {print sum/1024/1024 " MB"}')
echo "Total backup size: $BACKUP_SIZE"

# Alert if no recent backups
LAST_BACKUP=$(git for-each-ref --format='%(committerdate:unix)' refs/remotes/origin/backup/ | sort -n | tail -1)
CURRENT_TIME=$(date +%s)
DAYS_SINCE_BACKUP=$(( (CURRENT_TIME - LAST_BACKUP) / 86400 ))

if [ $DAYS_SINCE_BACKUP -gt 7 ]; then
    echo "‚ö†Ô∏è  WARNING: No backup created in $DAYS_SINCE_BACKUP days"
else
    echo "‚úÖ Recent backup found ($DAYS_SINCE_BACKUP days ago)"
fi
```

## üîÑ AUTOMATED BACKUP PROCEDURES

### Git Hooks for Automatic Backup:
```bash
#!/bin/sh
# pre-push hook for automatic backup

# Check if pushing to main branch
if [ "$2" = "refs/heads/main" ]; then
    echo "Creating automatic backup before push to main..."

    # Create backup branch
    BACKUP_NAME="auto-backup-$(date +%Y%m%d-%H%M)"
    git branch "$BACKUP_NAME"
    git push origin "$BACKUP_NAME"

    echo "Automatic backup created: $BACKUP_NAME"
fi
```

### CI/CD Backup Integration:
```yaml
# .github/workflows/backup.yml
name: Automated Backup
on:
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Daily Backup
        run: |
          BACKUP_NAME="daily-backup-$(date +%Y%m%d)"
          git checkout -b "$BACKUP_NAME"
          git push origin "$BACKUP_NAME"

      - name: Verify Backup Integrity
        run: |
          ./scripts/backup-health-metrics.sh
```

This comprehensive backup system ensures development safety and quick recovery capabilities.