export * from './types';
export * from './logical';
export * from './element';
export * from './array';
export * from './evaluation';
export * from './bitwise';
export * from './text';
export * from './comparison';
export * from './query';
export * from './build_query';
export * from './compile_query';
import { QueryOperator, QueryValue } from './types';
export declare const allOperators: {
    readonly $eq: typeof import("./comparison").EqOperator;
    readonly $ne: typeof import("./comparison").NeOperator;
    readonly $gt: typeof import("./comparison").GtOperator;
    readonly $gte: typeof import("./comparison").GteOperator;
    readonly $lt: typeof import("./comparison").LtOperator;
    readonly $lte: typeof import("./comparison").LteOperator;
    readonly $in: typeof import("./comparison").InOperator;
    readonly $nin: typeof import("./comparison").NinOperator;
    readonly $text: typeof import("./text").TextSearchOperatorImpl;
    readonly $bitsAllSet: typeof import("./bitwise").BitsAllSetOperator;
    readonly $bitsAnySet: typeof import("./bitwise").BitsAnySetOperator;
    readonly $bitsAllClear: typeof import("./bitwise").BitsAllClearOperator;
    readonly $bitsAnyClear: typeof import("./bitwise").BitsAnyClearOperator;
    readonly $mod: typeof import("./evaluation").ModOperator;
    readonly $regex: typeof import("./evaluation").RegexOperator;
    readonly $where: typeof import("./evaluation").WhereOperator;
    readonly $all: typeof import("./array").AllOperator;
    readonly $elemMatch: typeof import("./array").ElemMatchOperator;
    readonly $size: typeof import("./array").SizeOperator;
    readonly $exists: typeof import("./element").ExistsOperator;
    readonly $type: typeof import("./element").TypeOperator;
    readonly $and: typeof import("./logical").AndOperator;
    readonly $or: typeof import("./logical").OrOperator;
    readonly $not: typeof import("./logical").NotOperator;
    readonly $nor: typeof import("./logical").NorOperator;
};
export type OperatorType = keyof typeof allOperators;
export type OperatorConstructor = new (value: QueryValue) => QueryOperator;
export declare function isOperator(value: string): value is OperatorType;
export declare function createOperator(operator: OperatorType, value: QueryValue): QueryOperator;
export declare function validateOperatorValue(operator: OperatorType, value: unknown): value is QueryValue;
export declare function getOperatorType(operator: QueryOperator): string;
export declare function isOperatorOfType<T extends QueryOperator>(value: unknown, type: string): value is T;
