import { CSDatabase } from '../../CSDatabase';
import { ITokenManager, TokenPair, TokenValidation, TokenSession, TokenMetadata, TokenClaims, TokenHeader, ApiKeyInfo, KeyValidationResult, TokenTestResult, TokenStats, TokenMetrics, User, AuthContext, JWTConfig } from '../interfaces';
import { TimeRange } from '../interfaces/ITokenManager';
export declare class TokenManager implements ITokenManager {
    private database;
    private config;
    private tokenStorage;
    private sessionsCollection?;
    private apiKeysCollection?;
    private initialized;
    constructor(database: CSDatabase, config: JWTConfig);
    private ensureInitialized;
    private initializeCollections;
    generateTokenPair(user: User, context?: AuthContext): Promise<TokenPair>;
    generateAccessToken(user: User, context?: AuthContext): Promise<string>;
    generateRefreshToken(user: User, context?: AuthContext): Promise<string>;
    generateApiKey(user: User, name: string, expiresAt?: Date): Promise<ApiKeyInfo>;
    validateAccessToken(token: string): Promise<TokenValidation>;
    validateRefreshToken(token: string): Promise<TokenValidation>;
    validateApiKey(apiKey: string): Promise<TokenValidation>;
    private validateToken;
    isTokenValid(token: string): Promise<boolean>;
    isTokenExpired(token: string): Promise<boolean>;
    getTokenExpiration(token: string): Promise<Date | null>;
    refreshAccessToken(refreshToken: string): Promise<TokenPair>;
    rotateRefreshToken(refreshToken: string): Promise<string>;
    refreshTokenPair(refreshToken: string): Promise<TokenPair>;
    revokeToken(tokenId: string): Promise<void>;
    revokeUserTokens(userId: string): Promise<void>;
    revokeSessionTokens(sessionId: string): Promise<void>;
    isTokenRevoked(tokenId: string): Promise<boolean>;
    revokeExpiredTokens(): Promise<number>;
    getUserSessions(userId: string): Promise<TokenSession[]>;
    getTokenSession(token: string): Promise<TokenSession | null>;
    enforceConcurrentSessionLimit(userId: string): Promise<void>;
    terminateSession(sessionId: string): Promise<void>;
    terminateOtherSessions(userId: string, currentSessionId: string): Promise<void>;
    private createSession;
    private getUserScope;
    getTokenMetadata(token: string): Promise<TokenMetadata | null>;
    getTokenClaims(token: string): Promise<TokenClaims | null>;
    getTokenHeader(token: string): Promise<TokenHeader | null>;
    rotateSigningKeys(): Promise<void>;
    getPublicKey(): Promise<string | null>;
    getCurrentKeyId(): Promise<string>;
    validateKeyConfiguration(): Promise<KeyValidationResult>;
    updateConfiguration(config: Partial<JWTConfig>): Promise<void>;
    getConfiguration(): Promise<JWTConfig>;
    testTokenGeneration(): Promise<TokenTestResult>;
    getTokenStats(): Promise<TokenStats>;
    getTokenMetrics(timeRange: TimeRange): Promise<TokenMetrics>;
    getRevokedTokensCount(): Promise<number>;
}
