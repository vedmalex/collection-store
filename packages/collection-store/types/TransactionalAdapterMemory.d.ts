import { Item } from './types/Item';
import { ITransactionalStorageAdapter } from './ITransactionalStorageAdapter';
import { StoredData } from './types/StoredData';
import Collection from './collection';
import { WALEntry } from './wal/WALTypes';
export default class TransactionalAdapterMemory<T extends Item> implements ITransactionalStorageAdapter<T> {
    private walManager;
    private transactionData;
    private checkpoints;
    collection: Collection<T>;
    constructor();
    get name(): "AdapterMemory";
    clone(): ITransactionalStorageAdapter<T>;
    init(collection: Collection<T>): ITransactionalStorageAdapter<T>;
    isTransactional(): boolean;
    restore(name?: string): Promise<StoredData<T>>;
    store(name?: string): Promise<void>;
    writeWALEntry(entry: WALEntry): Promise<void>;
    readWALEntries(fromSequence?: number): Promise<WALEntry[]>;
    store_in_transaction(transactionId: string, name?: string): Promise<void>;
    restore_in_transaction(transactionId: string, name?: string): Promise<StoredData<T>>;
    prepareCommit(transactionId: string): Promise<boolean>;
    finalizeCommit(transactionId: string): Promise<void>;
    rollback(transactionId: string): Promise<void>;
    createCheckpoint(transactionId: string): Promise<string>;
    restoreFromCheckpoint(checkpointId: string): Promise<void>;
    close(): Promise<void>;
    getTransactionDataCount(): number;
    getCheckpointCount(): number;
    getWALEntriesCount(): number;
    clearWAL(): void;
}
