import { EventEmitter } from 'events';
import { IWALManager, WALEntry } from '../../wal/WALTypes';
import { INetworkManager, IReplicationManager, ReplicationConfig, ReplicationStatus } from '../types/ReplicationTypes';
export declare class WALReplicationManager extends EventEmitter implements IReplicationManager {
    private walManager;
    private networkManager;
    private replicationConfig;
    private pendingEntries;
    private acknowledgments;
    private replicationStatus;
    private syncTimeouts;
    constructor(walManager: IWALManager, networkManager: INetworkManager, config: ReplicationConfig);
    private setupMessageHandlers;
    private startStatusUpdater;
    private updateReplicationStatus;
    streamWALEntry(entry: WALEntry): Promise<void>;
    private replicateSync;
    private replicateAsync;
    receiveWALEntry(entry: WALEntry, sourceNode: string): Promise<void>;
    private handleWALEntry;
    private handleSyncRequest;
    private handleAcknowledgment;
    private sendAcknowledgmentForMessage;
    syncWithNode(nodeId: string, fromSequence?: number): Promise<void>;
    private validateWALEntry;
    private cleanupNodeData;
    getReplicationStatus(): ReplicationStatus;
    setRole(role: 'LEADER' | 'FOLLOWER' | 'CANDIDATE'): void;
    retryFailedReplications(): Promise<void>;
    close(): Promise<void>;
}
