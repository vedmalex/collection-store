#!/bin/bash

# üîç –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ duplicate-detection-report.json

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è jq
if ! command -v jq &> /dev/null; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install jq${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç—á–µ—Ç–∞
if [ ! -f "duplicate-detection-report.json" ]; then
    echo -e "${RED}‚ùå –§–∞–π–ª duplicate-detection-report.json –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    echo -e "${BLUE}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bun run tools/duplicate-detector.ts${NC}"
    exit 1
fi

echo -e "${BLUE}üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –¢–ï–°–¢–û–í${NC}"
echo "=================================="
echo ""

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo -e "${GREEN}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${NC}"
cat duplicate-detection-report.json | jq -r '
"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: \(.totalFiles)
–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: \(.processingTime | round)ms
–¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã: \(.exactDuplicates)
–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã: \(.structuralDuplicates)
–ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã: \(.partialDuplicates)
–í—Å–µ–≥–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: \(.duplicateGroups | length)"'

echo ""

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
echo -e "${RED}üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–£–ë–õ–ò–ö–ê–¢–´ (—Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è):${NC}"
EXACT_COUNT=$(cat duplicate-detection-report.json | jq '.duplicateGroups[] | select(.type == "EXACT")' | jq -s length)

if [ "$EXACT_COUNT" -gt 0 ]; then
    cat duplicate-detection-report.json | jq -r '.duplicateGroups[] | select(.type == "EXACT") |
    "
üìÅ –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:
   –§–∞–π–ª—ã: \(.files | map(.relativePath) | join(", "))
   –†–∞–∑–º–µ—Ä: \(.files[0].size) bytes
   –ü—Ä–∏—á–∏–Ω–∞: \(.reason)
   –î–µ–π—Å—Ç–≤–∏–µ: ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
"'
else
    echo "‚úÖ –¢–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""

# –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
echo -e "${YELLOW}üü° –°–¢–†–£–ö–¢–£–†–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´ (—Ç—Ä–µ–±—É—é—Ç –∞–Ω–∞–ª–∏–∑–∞):${NC}"
STRUCTURAL_COUNT=$(cat duplicate-detection-report.json | jq '.duplicateGroups[] | select(.type == "STRUCTURAL")' | jq -s length)

if [ "$STRUCTURAL_COUNT" -gt 0 ]; then
    echo "–ù–∞–π–¥–µ–Ω–æ $STRUCTURAL_COUNT –≥—Ä—É–ø–ø —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:"
    cat duplicate-detection-report.json | jq -r '.duplicateGroups[] | select(.type == "STRUCTURAL") |
    "
üìÅ \(.files | map(.relativePath) | join(" ‚Üî "))
   –ü—Ä–∏—á–∏–Ω–∞: \(.reason)
   –î–µ–π—Å—Ç–≤–∏–µ: ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"' | head -20

    if [ "$STRUCTURAL_COUNT" -gt 10 ]; then
        echo "... –∏ –µ—â–µ $(($STRUCTURAL_COUNT - 10)) –≥—Ä—É–ø–ø"
    fi
else
    echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""

# –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é
echo -e "${BLUE}üü¢ –ß–ê–°–¢–ò–ß–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´ (>99% —Å—Ö–æ–∂–µ—Å—Ç–∏):${NC}"
HIGH_SIMILARITY=$(cat duplicate-detection-report.json | jq '.duplicateGroups[] | select(.type == "PARTIAL" and .confidence > 0.99)' | jq -s length)

if [ "$HIGH_SIMILARITY" -gt 0 ]; then
    echo "–ù–∞–π–¥–µ–Ω–æ $HIGH_SIMILARITY –≥—Ä—É–ø–ø —Å –≤—ã—Å–æ–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é:"
    cat duplicate-detection-report.json | jq -r '.duplicateGroups[] | select(.type == "PARTIAL" and .confidence > 0.99) |
    "
üìÅ \(.files | map(.relativePath) | join(" ‚Üî "))
   –°—Ö–æ–∂–µ—Å—Ç—å: \(.confidence * 100 | round)%
   –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è: \(.differences[0:2] | join("; "))
   –î–µ–π—Å—Ç–≤–∏–µ: üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ import –ø—É—Ç—è—Ö"' | head -15
else
    echo "‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
echo -e "${GREEN}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ï–ô–°–¢–í–ò–Ø–ú:${NC}"
echo ""

if [ "$EXACT_COUNT" -gt 0 ]; then
    echo -e "${RED}üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–û (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):${NC}"
    echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ dry run: bun run tools/duplicate-cleaner.ts --dry-run"
    echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω –æ—á–∏—Å—Ç–∫–∏: cat duplicate-cleanup-dry-run.md"
    echo "   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É: bun run tools/duplicate-cleaner.ts"
    echo "   4. –≠–∫–æ–Ω–æ–º–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ~$(($(cat duplicate-detection-report.json | jq '.duplicateGroups[] | select(.type == "EXACT") | .files[0].size' | paste -sd+ | bc) / 1024))KB"
    echo ""
fi

if [ "$STRUCTURAL_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}üìÖ –í –¢–ï–ß–ï–ù–ò–ï –ù–ï–î–ï–õ–ò (–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):${NC}"
    echo "   1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä—É—á–Ω—É—é"
    echo "   2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–≤–∏—Ç—å (–æ–±—ã—á–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å import –ø—É—Ç–µ–π"
    echo "   4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ~$(($(cat duplicate-detection-report.json | jq '.duplicateGroups[] | select(.type == "STRUCTURAL") | .files[0].size' | paste -sd+ | bc) / 1024))KB"
    echo ""
fi

if [ "$HIGH_SIMILARITY" -gt 0 ]; then
    echo -e "${BLUE}üìÜ –í –¢–ï–ß–ï–ù–ò–ï –ú–ï–°–Ø–¶–ê (–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):${NC}"
    echo "   1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤"
    echo "   2. –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ import –ø—É—Ç–∏"
    echo "   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ CI/CD"
    echo ""
fi

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
echo -e "${GREEN}üõ†Ô∏è –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:${NC}"
echo ""
echo "# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:"
echo "cat duplicate-detection-report.json | jq '.duplicateGroups[] | select(.type == \"EXACT\")'"
echo ""
echo "# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
echo "cat duplicate-detection-report.json | jq -r '.duplicateGroups[] | select(.type == \"EXACT\") | .files[1].relativePath'"
echo ""
echo "# –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:"
echo "bun run tools/duplicate-cleaner.ts --dry-run"
echo ""
echo "# –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤:"
echo "bun run tools/test-structure-validator.ts"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—á–∏—Å—Ç–∫–µ
echo -e "${GREEN}‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –û–ß–ò–°–¢–ö–ï:${NC}"
if [ "$EXACT_COUNT" -gt 0 ]; then
    echo "üî¥ –ï—Å—Ç—å —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã - –≥–æ—Ç–æ–≤—ã –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ"
else
    echo "üü¢ –¢–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç - —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
fi

if [ "$STRUCTURAL_COUNT" -gt 5 ]; then
    echo "üü° –ú–Ω–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
elif [ "$STRUCTURAL_COUNT" -gt 0 ]; then
    echo "üü° –ï—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑"
else
    echo "üü¢ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç"
fi

echo ""
echo -e "${BLUE}üìã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–º. USAGE_GUIDE.md${NC}"