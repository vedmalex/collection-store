bun test v1.2.15 (df017990)

debug_test.js:
Starting optimizer...
[RealTimeOptimizer] Real-time optimizer started {
  config: {
    monitoringInterval: 1000,
    cooldownPeriod: 5,
    emergencyThresholds: {
      criticalCpuUsage: 90,
      criticalMemoryUsage: 95,
      criticalErrorRate: 10,
      criticalResponseTime: 500,
      criticalThroughputDrop: 50,
    },
  },
}
Getting active thresholds...
Active thresholds: {
  "responseTime": {
    "warning": 100,
    "critical": 150,
    "unit": "ms",
    "direction": "above"
  },
  "throughput": {
    "warning": 80,
    "critical": 50,
    "unit": "ops/sec",
    "direction": "below"
  },
  "errorRate": {
    "warning": 5,
    "critical": 10,
    "unit": "%",
    "direction": "above"
  },
  "resourceUsage": {
    "cpu": {
      "warning": 70,
      "critical": 80,
      "unit": "%",
      "direction": "above"
    },
    "memory": {
      "warning": 75,
      "critical": 85,
      "unit": "%",
      "direction": "above"
    },
    "network": {
      "warning": 80,
      "critical": 95,
      "unit": "%",
      "direction": "above"
    },
    "disk": {
      "warning": 80,
      "critical": 95,
      "unit": "%",
      "direction": "above"
    }
  }
}
Creating metrics with CPU 80%...
Metrics: {
  "timestamp": "2025-06-04T14:32:26.218Z",
  "responseTime": {
    "min": 25,
    "max": 100,
    "avg": 50,
    "p50": 45,
    "p95": 75,
    "p99": 90
  },
  "throughput": {
    "totalOperations": 1000,
    "operationsPerSecond": 100,
    "successfulOperations": 900,
    "failedOperations": 10
  },
  "errors": {
    "totalErrors": 10,
    "errorRate": 1,
    "errorTypes": {}
  },
  "system": {
    "cpuUsage": 80,
    "memoryUsage": 3435973836,
    "networkBandwidth": 149.25038064426568,
    "diskIO": 56.60230334398284
  }
}
Applying dynamic optimization...
DEBUG: CPU check {
  cpuUsage: 80,
  threshold: 70,
  condition: true,
}
DEBUG: Adding CPU action
[RealTimeOptimizer] Dynamic optimization applied {
  actionsCount: 1,
  metrics: {
    responseTime: 50,
    throughput: 100,
    errorRate: 1,
    cpuUsage: 80,
  },
}
Actions: [
  {
    "type": "configuration",
    "component": "system",
    "action": "reduce_cpu_load",
    "parameters": {
      "targetUsage": 56,
      "method": "throttling"
    },
    "reversible": true,
    "impact": "medium"
  }
]
[RealTimeOptimizer] Real-time optimizer stopped 

integration/debug_test.js:
Starting optimizer...
[RealTimeOptimizer] Real-time optimizer started {
  config: {
    monitoringInterval: 1000,
    cooldownPeriod: 5,
    emergencyThresholds: {
      criticalCpuUsage: 90,
      criticalMemoryUsage: 95,
      criticalErrorRate: 10,
      criticalResponseTime: 500,
      criticalThroughputDrop: 50,
    },
  },
}
Getting active thresholds...
Active thresholds: {
  "responseTime": {
    "warning": 100,
    "critical": 150,
    "unit": "ms",
    "direction": "above"
  },
  "throughput": {
    "warning": 80,
    "critical": 50,
    "unit": "ops/sec",
    "direction": "below"
  },
  "errorRate": {
    "warning": 5,
    "critical": 10,
    "unit": "%",
    "direction": "above"
  },
  "resourceUsage": {
    "cpu": {
      "warning": 70,
      "critical": 80,
      "unit": "%",
      "direction": "above"
    },
    "memory": {
      "warning": 75,
      "critical": 85,
      "unit": "%",
      "direction": "above"
    },
    "network": {
      "warning": 80,
      "critical": 95,
      "unit": "%",
      "direction": "above"
    },
    "disk": {
      "warning": 80,
      "critical": 95,
      "unit": "%",
      "direction": "above"
    }
  }
}
Creating metrics with CPU 80%...
Metrics: {
  "timestamp": "2025-06-04T14:32:26.224Z",
  "responseTime": {
    "min": 25,
    "max": 100,
    "avg": 50,
    "p50": 45,
    "p95": 75,
    "p99": 90
  },
  "throughput": {
    "totalOperations": 1000,
    "operationsPerSecond": 100,
    "successfulOperations": 900,
    "failedOperations": 10
  },
  "errors": {
    "totalErrors": 10,
    "errorRate": 1,
    "errorTypes": {}
  },
  "system": {
    "cpuUsage": 80,
    "memoryUsage": 3435973836,
    "networkBandwidth": 147.71819841244195,
    "diskIO": 66.06338887886913
  }
}
Applying dynamic optimization...
DEBUG: CPU check {
  cpuUsage: 80,
  threshold: 70,
  condition: true,
}
DEBUG: Adding CPU action
[RealTimeOptimizer] Dynamic optimization applied {
  actionsCount: 1,
  metrics: {
    responseTime: 50,
    throughput: 100,
    errorRate: 1,
    cpuUsage: 80,
  },
}
Actions: [
  {
    "type": "configuration",
    "component": "system",
    "action": "reduce_cpu_load",
    "parameters": {
      "targetUsage": 56,
      "method": "throttling"
    },
    "reversible": true,
    "impact": "medium"
  }
]
[RealTimeOptimizer] Real-time optimizer stopped 

src/__test__/TransactionManager.test.ts:
(skip) TransactionManager > Basic Transaction Lifecycle > should create and manage transactions
(skip) TransactionManager > Basic Transaction Lifecycle > should get transaction by ID
(skip) TransactionManager > Basic Transaction Lifecycle > should throw error for non-existent transaction
(skip) TransactionManager > Successful Transaction Commit > should commit transaction with single resource
(skip) TransactionManager > Successful Transaction Commit > should commit transaction with multiple resources
(skip) TransactionManager > Transaction Rollback > should rollback when prepare fails
(skip) TransactionManager > Transaction Rollback > should rollback explicitly
(skip) TransactionManager > Change Tracking > should record and notify changes
(skip) TransactionManager > Change Tracking > should not notify changes on rollback
(skip) TransactionManager > Transaction Options > should respect transaction timeout
(skip) TransactionManager > Transaction Options > should set default isolation level
(skip) TransactionManager > Error Handling > should handle commit failure gracefully
(skip) TransactionManager > Error Handling > should handle rollback failure gracefully
(skip) TransactionManager > Cleanup > should cleanup expired transactions

src/__test__/raft-leader-election.test.ts:
(skip) Raft Leader Election > Initialization > should initialize as follower
(skip) Raft Leader Election > Initialization > should start election timers
(skip) Raft Leader Election > Vote Request Handling > should grant vote for valid request
(skip) Raft Leader Election > Vote Request Handling > should reject vote for outdated term
(skip) Raft Leader Election > Vote Request Handling > should reject vote if already voted for different candidate
(skip) Raft Leader Election > Vote Request Handling > should allow vote for same candidate multiple times
(skip) Raft Leader Election > Heartbeat Handling > should accept heartbeat from leader
(skip) Raft Leader Election > Heartbeat Handling > should update term from heartbeat
(skip) Raft Leader Election > Heartbeat Handling > should ignore heartbeat with older term
(skip) Raft Leader Election > Election Process > should become candidate when election triggered
(skip) Raft Leader Election > Election Process > should become leader with majority votes
(skip) Raft Leader Election > Election Process > should remain candidate without majority votes
(skip) Raft Leader Election > Election Process > should step down if higher term received during election
(skip) Raft Leader Election > Single Node Cluster > should become leader immediately in single node cluster
(skip) Raft Leader Election > Leader Behavior > should send heartbeats as leader
(skip) Raft Leader Election > Leader Behavior > should have heartbeat timer as leader
(skip) Raft Leader Election > Error Handling > should handle RPC failures gracefully
(skip) Raft Leader Election > Error Handling > should throw error when triggering election from non-follower state
(skip) Raft Leader Election > Metrics > should provide accurate metrics

src/__test__/global-cleanup.test.ts:
(skip) Global Cleanup > should be the last test to run
ðŸ§¹ Running global cleanup of test data...
âœ… Global cleanup completed

src/__test__/replication-wal-streaming.test.ts:
(skip) Replication WAL Streaming Integration > WAL Entry Streaming > should replicate WAL entries from leader to followers
(skip) Replication WAL Streaming Integration > WAL Entry Streaming > should handle multiple WAL entries in sequence
(skip) Replication WAL Streaming Integration > WAL Entry Streaming > should handle sync mode replication with acknowledgments
(skip) Replication WAL Streaming Integration > Role Management > should handle leader promotion
(skip) Replication WAL Streaming Integration > Role Management > should handle leader demotion
(skip) Replication WAL Streaming Integration > Role Management > should emit role change events
(skip) Replication WAL Streaming Integration > Error Handling > should handle replication failures gracefully
(skip) Replication WAL Streaming Integration > Error Handling > should handle invalid WAL entries
(skip) Replication WAL Streaming Integration > Performance > should handle moderate-volume WAL streaming
(skip) Replicated WAL Collection Integration > should handle basic collection operations
(skip) Replicated WAL Collection Integration > should handle cluster status monitoring

src/__test__/CompositeKeyUtils.unified.test.ts:
(skip) CompositeKeyUtils Unified API > isCompositeIndex > should detect single key index
(skip) CompositeKeyUtils Unified API > isCompositeIndex > should detect composite index with multiple keys
(skip) CompositeKeyUtils Unified API > isCompositeIndex > should not consider single key in array as composite
(skip) CompositeKeyUtils Unified API > isCompositeIndex > should handle empty keys array
(skip) CompositeKeyUtils Unified API > normalizeIndexFields > should normalize single key definition
(skip) CompositeKeyUtils Unified API > normalizeIndexFields > should normalize single key without order
(skip) CompositeKeyUtils Unified API > normalizeIndexFields > should normalize composite keys with strings
(skip) CompositeKeyUtils Unified API > normalizeIndexFields > should normalize composite keys with mixed types
(skip) CompositeKeyUtils Unified API > normalizeIndexFields > should handle IndexField objects without order
(skip) CompositeKeyUtils Unified API > normalizeIndexFields > should throw error for invalid definition
(skip) CompositeKeyUtils Unified API > generateIndexName > should generate name for single field
(skip) CompositeKeyUtils Unified API > generateIndexName > should generate name for composite fields with all ascending
(skip) CompositeKeyUtils Unified API > generateIndexName > should generate name for composite fields with mixed order
(skip) CompositeKeyUtils Unified API > generateIndexName > should generate name for all descending fields
(skip) CompositeKeyUtils Unified API > createProcessFunction > should create process function for single field
(skip) CompositeKeyUtils Unified API > createProcessFunction > should create process function for composite fields
(skip) CompositeKeyUtils Unified API > createProcessFunction > should use custom separator
(skip) CompositeKeyUtils Unified API > createProcessFunction > should handle nested paths
(skip) CompositeKeyUtils Unified API > createComparator > should return undefined for single ascending field
(skip) CompositeKeyUtils Unified API > createComparator > should create comparator for single descending field
(skip) CompositeKeyUtils Unified API > createComparator > should create comparator for composite fields with mixed order
(skip) CompositeKeyUtils Unified API > createComparator > should handle null values in comparison
(skip) CompositeKeyUtils Unified API > createComparator > should handle different data types
(skip) CompositeKeyUtils Unified API > Integration with serialization > should work with serialize/deserialize
(skip) CompositeKeyUtils Unified API > Integration with serialization > should maintain sort order consistency
(skip) CompositeKeyUtils Unified API > Error handling > should handle missing fields gracefully
(skip) CompositeKeyUtils Unified API > Error handling > should handle empty fields array
(skip) CompositeKeyUtils Unified API > Performance considerations > should handle large composite keys efficiently

src/__test__/compile-query-compatibility.test.ts:
(skip) Compile Query Compatibility Tests > Basic Field Equality > should match simple string equality
(skip) Compile Query Compatibility Tests > Basic Field Equality > should match numeric equality
(skip) Compile Query Compatibility Tests > Basic Field Equality > should match boolean equality
(skip) Compile Query Compatibility Tests > Basic Field Equality > should match null equality
(skip) Compile Query Compatibility Tests > Basic Field Equality > should match nested field equality
(skip) Compile Query Compatibility Tests > Basic Field Equality > should match multiple fields (implicit $and)
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $eq operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $gt operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $gte operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $lt operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $lte operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $ne operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $in operator with simple values
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $in operator with array field
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $nin operator
(skip) Compile Query Compatibility Tests > Comparison Operators > should match $nin operator with array field
(skip) Compile Query Compatibility Tests > Logical Operators > should match $and operator
(skip) Compile Query Compatibility Tests > Logical Operators > should match $or operator
(skip) Compile Query Compatibility Tests > Logical Operators > should match $not operator
(skip) Compile Query Compatibility Tests > Logical Operators > should match $not with complex condition
(skip) Compile Query Compatibility Tests > Logical Operators > should match $nor operator
(skip) Compile Query Compatibility Tests > Logical Operators > should match complex nested logical operators
(skip) Compile Query Compatibility Tests > Element Operators > should match $exists true
(skip) Compile Query Compatibility Tests > Element Operators > should match $exists false
(skip) Compile Query Compatibility Tests > Element Operators > should match $type string
(skip) Compile Query Compatibility Tests > Element Operators > should match $type number
(skip) Compile Query Compatibility Tests > Element Operators > should match $type boolean
(skip) Compile Query Compatibility Tests > Element Operators > should match $type array
(skip) Compile Query Compatibility Tests > Element Operators > should match $type object
(skip) Compile Query Compatibility Tests > Element Operators > should match $type null
(skip) Compile Query Compatibility Tests > Element Operators > should match $type with multiple types
(skip) Compile Query Compatibility Tests > Array Operators > should match $all operator
(skip) Compile Query Compatibility Tests > Array Operators > should match $all with multiple elements
(skip) Compile Query Compatibility Tests > Array Operators > should match $all with empty array
(skip) Compile Query Compatibility Tests > Array Operators > should match $size operator
(skip) Compile Query Compatibility Tests > Array Operators > should match $size with different sizes
(skip) Compile Query Compatibility Tests > Array Operators > should match $elemMatch operator
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $mod operator
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $mod with different values
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $regex with string pattern
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $regex with options
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $regex with RegExp object
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $regex with complex pattern
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $where operator with function
(skip) Compile Query Compatibility Tests > Evaluation Operators > should match $where operator with string
(skip) Compile Query Compatibility Tests > Bitwise Operators > should match $bitsAllSet operator
(skip) Compile Query Compatibility Tests > Bitwise Operators > should match $bitsAnySet operator
(skip) Compile Query Compatibility Tests > Bitwise Operators > should match $bitsAllClear operator
(skip) Compile Query Compatibility Tests > Bitwise Operators > should match $bitsAnyClear operator
(skip) Compile Query Compatibility Tests > Bitwise Operators > should match bitwise operators with array positions
(skip) Compile Query Compatibility Tests > Text Search Operator > should match $text operator
(skip) Compile Query Compatibility Tests > Text Search Operator > should match $text with case sensitivity
(skip) Compile Query Compatibility Tests > Complex Queries > should match complex nested query
(skip) Compile Query Compatibility Tests > Complex Queries > should match query with mixed operators
(skip) Compile Query Compatibility Tests > Complex Queries > should match query with array operations
(skip) Compile Query Compatibility Tests > Complex Queries > should match query with bitwise and regex
(skip) Compile Query Compatibility Tests > Edge Cases > should handle empty query
(skip) Compile Query Compatibility Tests > Edge Cases > should handle query with undefined values
(skip) Compile Query Compatibility Tests > Edge Cases > should handle query with nested undefined
(skip) Compile Query Compatibility Tests > Edge Cases > should handle regex with special characters
(skip) Compile Query Compatibility Tests > Edge Cases > should handle $in with mixed types
(skip) Compile Query Compatibility Tests > Edge Cases > should handle deeply nested fields

src/__test__/typed-collection.test.ts:
(skip) TypedCollection > Schema Integration > should automatically create indexes from schema
(skip) TypedCollection > Schema Integration > should validate schema on document insertion
(skip) TypedCollection > Schema Integration > should reject invalid documents in strict mode
(skip) TypedCollection > Schema Integration > should coerce types when enabled
(skip) TypedCollection > Type-Safe Queries > should support type-safe field queries
(skip) TypedCollection > Type-Safe Queries > should support complex type-safe queries
(skip) TypedCollection > Type-Safe Queries > should support type-safe field-based queries
(skip) TypedCollection > Type-Safe Queries > should validate query operators against field types
(skip) TypedCollection > Type-Safe Updates > should support type-safe updates
(skip) TypedCollection > Type-Safe Updates > should support type-safe partial updates
(skip) TypedCollection > Type-Safe Updates > should support type-safe updates by ID
(skip) TypedCollection > Index Management > should support creating additional indexes
(skip) TypedCollection > Index Management > should support dropping indexes
(skip) TypedCollection > Schema Utilities > should provide access to schema
(skip) TypedCollection > Schema Utilities > should validate documents against schema
(skip) TypedCollection > Performance and Integration > should maintain performance with schema validation
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $set operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $inc operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $mul operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $min and $max operators
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $currentDate operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $unset operator
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $addToSet operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $addToSet with $each
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $push operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $push with $each and options
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $pull operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $pullAll operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $pop operation
(skip) TypedCollection Type-safe Update Operations > Bulk Update Operations > should perform ordered bulk updates
(skip) TypedCollection Type-safe Update Operations > Bulk Update Operations > should perform parallel bulk updates
(skip) TypedCollection Type-safe Update Operations > Upsert Operations > should perform upsert when no documents match
(skip) TypedCollection Type-safe Update Operations > Schema Validation in Updates > should validate schema during updates
(skip) TypedCollection Type-safe Update Operations > Schema Validation in Updates > should skip validation when disabled
(skip) TypedCollection Type-safe Update Operations > Mixed Update Operations > should handle mixed direct and operator updates

src/__test__/CSDatabase.transaction.test.ts:
(skip) CSDatabase Transaction Integration > Basic Transaction Lifecycle > should start and commit transaction
(skip) CSDatabase Transaction Integration > Basic Transaction Lifecycle > should start and abort transaction
(skip) CSDatabase Transaction Integration > Basic Transaction Lifecycle > should handle session lifecycle
(skip) CSDatabase Transaction Integration > Transaction State Management > should prevent starting multiple transactions
(skip) CSDatabase Transaction Integration > Transaction State Management > should prevent commit without active transaction
(skip) CSDatabase Transaction Integration > Transaction State Management > should prevent abort without active transaction
(skip) CSDatabase Transaction Integration > Transaction State Management > should get current transaction details
(skip) CSDatabase Transaction Integration > Transaction Options > should accept transaction options
(skip) CSDatabase Transaction Integration > Transaction Options > should use default options
(skip) CSDatabase Transaction Integration > Change Notifications > should register and receive change notifications
(skip) CSDatabase Transaction Integration > Change Notifications > should not notify on rollback
(skip) CSDatabase Transaction Integration > Error Handling > should handle endSession with active transaction
(skip) CSDatabase Transaction Integration > Error Handling > should cleanup expired transactions
(skip) CSDatabase Transaction Integration > Collection Operations with Transactions > should create collection within transaction
(skip) CSDatabase Transaction Integration > Collection Operations with Transactions > should rollback collection creation
(skip) CSDatabase Transaction Integration > Concurrent Transaction Handling > should handle multiple databases independently

src/__test__/TransactionalCollection.test.ts:
(skip) TransactionalCollection > Basic Transactional Operations > should create item in transaction
(skip) TransactionalCollection > Basic Transactional Operations > should update item in transaction
(skip) TransactionalCollection > Basic Transactional Operations > should remove item in transaction
(skip) TransactionalCollection > Basic Transactional Operations > should handle multiple operations in single transaction
(skip) TransactionalCollection > Index Integration > should update indexes in transaction
(skip) TransactionalCollection > Index Integration > should handle index updates on item modification
(skip) TransactionalCollection > Index Integration > should remove from indexes on item deletion
(skip) TransactionalCollection > 2PC Protocol > should prepare and commit successfully
(skip) TransactionalCollection > 2PC Protocol > should rollback transaction without applying changes
(skip) TransactionalCollection > 2PC Protocol > should handle prepare failure gracefully
(skip) TransactionalCollection > Transaction Isolation > should maintain isolation between transactions
(skip) TransactionalCollection > Transaction Isolation > should handle concurrent updates to same item
(skip) TransactionalCollection > Error Handling > should handle validation errors
(skip) TransactionalCollection > Error Handling > should handle updates to non-existent items
(skip) TransactionalCollection > Error Handling > should handle removes of non-existent items
(skip) TransactionalCollection > Error Handling > should handle missing indexes gracefully
(skip) TransactionalCollection > Transaction State Management > should track transaction changes
(skip) TransactionalCollection > Transaction State Management > should provide access to original collection
(skip) TransactionalListWrapper > Transactional Operations > should handle transactional set operations
(skip) TransactionalListWrapper > Transactional Operations > should handle transactional delete operations
(skip) TransactionalListWrapper > Transactional Operations > should track changes correctly
(skip) TransactionalListWrapper > 2PC Protocol > should prepare and commit successfully
(skip) TransactionalListWrapper > 2PC Protocol > should rollback without applying changes

src/__test__/query-integration.test.ts:
(skip) Query Integration Tests > Basic Field Equality > should find users by exact name match
(skip) Query Integration Tests > Basic Field Equality > should find users by status
(skip) Query Integration Tests > Basic Field Equality > should find users by numeric id
(skip) Query Integration Tests > Comparison Operators > should find users older than 30 using $gt
(skip) Query Integration Tests > Comparison Operators > should find users with age >= 30 using $gte
(skip) Query Integration Tests > Comparison Operators > should find users younger than 30 using $lt
(skip) Query Integration Tests > Comparison Operators > should find users with score <= 85 using $lte
(skip) Query Integration Tests > Comparison Operators > should find users not named Alice using $ne
(skip) Query Integration Tests > Array Operators > should find users with specific status using $in
(skip) Query Integration Tests > Array Operators > should find users without specific status using $nin
(skip) Query Integration Tests > Array Operators > should find users with all specified tags using $all
(skip) Query Integration Tests > Array Operators > should find users with arrays of specific size using $size
(skip) Query Integration Tests > Logical Operators > should find active developers using $and
(skip) Query Integration Tests > Logical Operators > should find users who are either young or have high score using $or
(skip) Query Integration Tests > Logical Operators > should find users who are NOT inactive using $not
(skip) Query Integration Tests > Logical Operators > should find users who are neither young nor have low score using $nor
(skip) Query Integration Tests > Element Operators > should find users where age field exists using $exists
(skip) Query Integration Tests > Element Operators > should find users where non-existent field does not exist using $exists
(skip) Query Integration Tests > Element Operators > should find users by field type using $type
(skip) Query Integration Tests > Element Operators > should find numeric fields using $type
(skip) Query Integration Tests > Complex Queries > should handle complex nested query with multiple operators
(skip) Query Integration Tests > Complex Queries > should handle query with implicit AND (multiple fields)
(skip) Query Integration Tests > Complex Queries > should handle empty query (matches all)
(skip) Query Integration Tests > Edge Cases > should handle query that matches no documents
(skip) Query Integration Tests > Edge Cases > should handle query with null values
(skip) Query Integration Tests > Edge Cases > should handle query with undefined values
(skip) Query Integration Tests > Performance and Functionality > should work with large dataset efficiently
(skip) Query Integration Tests > Performance and Functionality > should be reusable across different datasets

src/__test__/typed-collection-updates.test.ts:
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $set operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $inc operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $mul operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $min and $max operators
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $currentDate operator
(skip) TypedCollection Type-safe Update Operations > Atomic Update Operations > should perform atomic update with $unset operator
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $addToSet operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $push operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $pull operation
(skip) TypedCollection Type-safe Update Operations > Array Update Operations > should perform $pop operation
(skip) TypedCollection Type-safe Update Operations > Mixed Update Operations > should handle mixed direct and operator updates

src/__test__/SingleKeyUtils.test.ts:
(skip) SingleKeyUtils > createComparator > ascending order (default) > should handle numbers correctly
(skip) SingleKeyUtils > createComparator > ascending order (default) > should handle strings correctly
(skip) SingleKeyUtils > createComparator > ascending order (default) > should handle booleans correctly
(skip) SingleKeyUtils > createComparator > ascending order (default) > should handle dates correctly
(skip) SingleKeyUtils > createComparator > ascending order (default) > should handle null values correctly
(skip) SingleKeyUtils > createComparator > ascending order (default) > should handle undefined values correctly
(skip) SingleKeyUtils > createComparator > ascending order (default) > should fallback to string comparison for mixed types
(skip) SingleKeyUtils > createComparator > descending order > should handle numbers correctly in descending order
(skip) SingleKeyUtils > createComparator > descending order > should handle strings correctly in descending order
(skip) SingleKeyUtils > createComparator > descending order > should handle null values correctly in descending order
(skip) SingleKeyUtils > createComparator > default behavior > should default to ascending order when no order specified
(skip) SingleKeyUtils > validateSortOrder > should validate correct sort orders
(skip) SingleKeyUtils > validateSortOrder > should reject invalid sort orders
(skip) SingleKeyUtils > normalizeSortOrder > should return valid sort orders as-is
(skip) SingleKeyUtils > normalizeSortOrder > should default to asc for invalid values

src/__test__/wal-transaction-coordination.test.ts:
(skip) WAL Transaction Coordination > Basic Transaction Coordination > should begin transaction and write to WAL
(skip) WAL Transaction Coordination > Basic Transaction Coordination > should commit transaction with storage adapters
(skip) WAL Transaction Coordination > Basic Transaction Coordination > should rollback transaction with storage adapters
(skip) WAL Transaction Coordination > Storage Adapter Integration > should register and unregister storage adapters
(skip) WAL Transaction Coordination > Storage Adapter Integration > should include storage adapters in 2PC protocol
(skip) WAL Transaction Coordination > Storage Adapter Integration > should handle adapter prepare failure
(skip) WAL Transaction Coordination > WAL Operations > should write custom WAL entries
(skip) WAL Transaction Coordination > WAL Operations > should flush WAL to storage
(skip) WAL Transaction Coordination > WAL Operations > should get current WAL sequence number
(skip) WAL Transaction Coordination > WAL Operations > should create checkpoints
(skip) WAL Transaction Coordination > Recovery Scenarios > should perform recovery on demand
(skip) WAL Transaction Coordination > Recovery Scenarios > should handle WAL disabled scenarios
(skip) WAL Transaction Coordination > Error Handling > should handle transaction not found errors
(skip) WAL Transaction Coordination > Error Handling > should handle checkpoint creation when WAL disabled
(skip) WAL Transaction Coordination > Error Handling > should handle adapter errors gracefully

src/__test__/advanced-features.test.ts:
(skip) Advanced Features Test Suite > WAL Compression > Basic Compression Operations > should compress and decompress WAL entries with gzip
(skip) Advanced Features Test Suite > WAL Compression > Basic Compression Operations > should compress and decompress WAL entries with lz4
(skip) Advanced Features Test Suite > WAL Compression > Basic Compression Operations > should skip compression for small entries
(skip) Advanced Features Test Suite > WAL Compression > Basic Compression Operations > should skip compression when ratio is poor
(skip) Advanced Features Test Suite > WAL Compression > Basic Compression Operations > should handle compression disabled
(skip) Advanced Features Test Suite > WAL Compression > Compression Statistics > should calculate compression statistics correctly
(skip) Advanced Features Test Suite > WAL Compression > Compression Statistics > should update compression options
(skip) Advanced Features Test Suite > WAL Compression > Batch Operations > should handle batch compression and decompression
(skip) Advanced Features Test Suite > Performance Monitoring > Basic Monitoring Operations > should initialize with default configuration
(skip) Advanced Features Test Suite > Performance Monitoring > Basic Monitoring Operations > should initialize with custom configuration
(skip) Advanced Features Test Suite > Performance Monitoring > Basic Monitoring Operations > should record operation metrics
(skip) Advanced Features Test Suite > Performance Monitoring > Basic Monitoring Operations > should record WAL operations
(skip) Advanced Features Test Suite > Performance Monitoring > Basic Monitoring Operations > should record transaction operations
(skip) Advanced Features Test Suite > Performance Monitoring > Basic Monitoring Operations > should record compression operations
(skip) Advanced Features Test Suite > Performance Monitoring > Metrics Collection > should collect metrics periodically
(skip) Advanced Features Test Suite > Performance Monitoring > Metrics Collection > should maintain bounded history
(skip) Advanced Features Test Suite > Performance Monitoring > Alert System > should generate latency alerts
(skip) Advanced Features Test Suite > Performance Monitoring > Alert System > should generate error rate alerts
(skip) Advanced Features Test Suite > Performance Monitoring > Alert System > should clear alerts
(skip) Advanced Features Test Suite > Performance Monitoring > Configuration Management > should update configuration
(skip) Advanced Features Test Suite > Performance Monitoring > Configuration Management > should reset metrics
(skip) Advanced Features Test Suite > Performance Monitoring > Summary Statistics > should provide comprehensive summary
(skip) Advanced Features Test Suite > Integration Tests > should integrate compression with monitoring

src/__test__/composite-index-basic.test.ts:
(skip) Composite Index Basic Functionality > CompositeKeyUtils Core Functions > should serialize and deserialize composite keys correctly
(skip) Composite Index Basic Functionality > CompositeKeyUtils Core Functions > should handle null and undefined values
(skip) Composite Index Basic Functionality > CompositeKeyUtils Core Functions > should escape special characters correctly
(skip) Composite Index Basic Functionality > CompositeKeyUtils Core Functions > should use custom separator
(skip) Composite Index Basic Functionality > Index Field Normalization > should normalize single key definition
(skip) Composite Index Basic Functionality > Index Field Normalization > should normalize composite key definition
(skip) Composite Index Basic Functionality > Index Name Generation > should generate name for single field
(skip) Composite Index Basic Functionality > Index Name Generation > should generate name for composite fields
(skip) Composite Index Basic Functionality > Process Function Creation > should create process function for single field
(skip) Composite Index Basic Functionality > Process Function Creation > should create process function for composite fields
(skip) Composite Index Basic Functionality > Process Function Creation > should use custom separator in process function
(skip) Composite Index Basic Functionality > Comparator Creation > should return undefined for single ascending field
(skip) Composite Index Basic Functionality > Comparator Creation > should create comparator for single descending field
(skip) Composite Index Basic Functionality > Comparator Creation > should create comparator for composite fields
(skip) Composite Index Basic Functionality > Index Detection > should detect single key index
(skip) Composite Index Basic Functionality > Index Detection > should detect composite index
(skip) Composite Index Basic Functionality > Index Detection > should not consider single key in array as composite
(skip) Composite Index Basic Functionality > Edge Cases > should handle empty values
(skip) Composite Index Basic Functionality > Edge Cases > should handle very long keys
(skip) Composite Index Basic Functionality > Edge Cases > should handle unicode characters

src/__test__/wal-basic.test.ts:
(skip) WAL Basic Functionality > MemoryWALManager > should write and read WAL entries
(skip) WAL Basic Functionality > MemoryWALManager > should assign sequential sequence numbers
(skip) WAL Basic Functionality > MemoryWALManager > should filter entries by sequence number
(skip) WAL Basic Functionality > MemoryWALManager > should truncate entries before sequence number
(skip) WAL Basic Functionality > MemoryWALManager > should create checkpoints
(skip) WAL Basic Functionality > FileWALManager > should persist WAL entries to file
(skip) WAL Basic Functionality > FileWALManager > should recover from existing WAL file
(skip) WAL Basic Functionality > FileWALManager > should validate checksums
(skip) WAL Basic Functionality > WAL Recovery Scenarios > should recover committed transactions
(skip) WAL Basic Functionality > WAL Recovery Scenarios > should rollback incomplete transactions
(skip) WAL Basic Functionality > WAL Recovery Scenarios > should handle explicitly rolled back transactions

src/__test__/query-simple-integration.test.ts:
(skip) Query Simple Integration Tests > Real-world Query Scenarios > should find products in stock under $50
(skip) Query Simple Integration Tests > Real-world Query Scenarios > should find electronics with high ratings
(skip) Query Simple Integration Tests > Real-world Query Scenarios > should find products with office-related tags
(skip) Query Simple Integration Tests > Real-world Query Scenarios > should find products created in 2023 with high view counts
(skip) Query Simple Integration Tests > Complex Business Logic Queries > should find recommended products (in stock, rated, popular)
(skip) Query Simple Integration Tests > Complex Business Logic Queries > should find products needing restocking or promotion
(skip) Query Simple Integration Tests > Complex Business Logic Queries > should find premium products (expensive or highly rated)
(skip) Query Simple Integration Tests > Complex Business Logic Queries > should find products for office setup (furniture or electronics)
(skip) Query Simple Integration Tests > Data Analysis Queries > should segment products by price range
(skip) Query Simple Integration Tests > Data Analysis Queries > should find products with missing or low ratings
(skip) Query Simple Integration Tests > Data Analysis Queries > should find recently updated popular products
(skip) Query Simple Integration Tests > Query Performance and Optimization > should handle multiple filters efficiently
(skip) Query Simple Integration Tests > Query Performance and Optimization > should handle regex patterns efficiently
(skip) Query Simple Integration Tests > Query Performance and Optimization > should handle complex nested queries efficiently
(skip) Query Simple Integration Tests > Edge Cases and Robustness > should handle empty result sets gracefully
(skip) Query Simple Integration Tests > Edge Cases and Robustness > should handle queries matching all products
(skip) Query Simple Integration Tests > Edge Cases and Robustness > should handle null and undefined values correctly
(skip) Query Simple Integration Tests > Edge Cases and Robustness > should handle type coercion appropriately

src/__test__/raft-log-replication.test.ts:
(skip) Raft Log Replication > Initialization > should initialize with correct peer state
(skip) Raft Log Replication > AppendEntries Handling (Follower) > should accept valid AppendEntries request
(skip) Raft Log Replication > AppendEntries Handling (Follower) > should reject AppendEntries with mismatched prevLog
(skip) Raft Log Replication > AppendEntries Handling (Follower) > should handle empty AppendEntries (heartbeat)
(skip) Raft Log Replication > Leader Replication > should start replication as leader
(skip) Raft Log Replication > Leader Replication > should replicate to all peers successfully
(skip) Raft Log Replication > Leader Replication > should handle replication failures
(skip) Raft Log Replication > Leader Replication > should advance commit index with majority replication
(skip) Raft Log Replication > Error Handling > should handle RPC errors gracefully
(skip) Raft Log Replication > Error Handling > should throw error when RPC handler not set
(skip) Raft Log Replication > Log Conflicts > should detect log conflicts
(skip) Raft Log Replication > Metrics > should provide accurate replication metrics

src/__test__/CompositeKeyUtils.test.ts:
(skip) CompositeKeyUtils > serialize > should serialize simple values
(skip) CompositeKeyUtils > serialize > should handle null and undefined values
(skip) CompositeKeyUtils > serialize > should handle empty array
(skip) CompositeKeyUtils > serialize > should use custom separator
(skip) CompositeKeyUtils > serialize > should escape separator characters in values
(skip) CompositeKeyUtils > serialize > should handle different data types
(skip) CompositeKeyUtils > serialize > should handle empty strings
(skip) CompositeKeyUtils > deserialize > should deserialize simple values
(skip) CompositeKeyUtils > deserialize > should handle null values
(skip) CompositeKeyUtils > deserialize > should handle empty string
(skip) CompositeKeyUtils > deserialize > should use custom separator
(skip) CompositeKeyUtils > deserialize > should unescape separator characters
(skip) CompositeKeyUtils > deserialize > should handle single value
(skip) CompositeKeyUtils > compare > should compare compound keys lexicographically
(skip) CompositeKeyUtils > compare > should handle equal keys
(skip) CompositeKeyUtils > compare > should handle reverse comparison
(skip) CompositeKeyUtils > compare > should handle different length keys
(skip) CompositeKeyUtils > compare > should handle numeric comparison as strings
(skip) CompositeKeyUtils > extractValues > should extract simple property values
(skip) CompositeKeyUtils > extractValues > should extract nested property values
(skip) CompositeKeyUtils > extractValues > should handle missing properties
(skip) CompositeKeyUtils > extractValues > should handle array access
(skip) CompositeKeyUtils > extractValues > should handle mixed path types
(skip) CompositeKeyUtils > createKey > should create compound key from item
(skip) CompositeKeyUtils > createKey > should use custom separator
(skip) CompositeKeyUtils > createKey > should handle single key path
(skip) CompositeKeyUtils > validateKeyPaths > should validate correct key paths
(skip) CompositeKeyUtils > validateKeyPaths > should reject empty array
(skip) CompositeKeyUtils > validateKeyPaths > should reject non-array input
(skip) CompositeKeyUtils > validateKeyPaths > should reject empty strings
(skip) CompositeKeyUtils > validateKeyPaths > should reject non-string paths
(skip) CompositeKeyUtils > generateIndexName > should generate index name from key paths
(skip) CompositeKeyUtils > generateIndexName > should handle single key path
(skip) CompositeKeyUtils > generateIndexName > should handle nested paths
(skip) CompositeKeyUtils > isEmptyValue > should identify null as empty
(skip) CompositeKeyUtils > isEmptyValue > should identify undefined as empty
(skip) CompositeKeyUtils > isEmptyValue > should identify empty string as empty
(skip) CompositeKeyUtils > isEmptyValue > should not identify zero as empty
(skip) CompositeKeyUtils > isEmptyValue > should not identify false as empty
(skip) CompositeKeyUtils > isEmptyValue > should not identify non-empty string as empty
(skip) CompositeKeyUtils > createPartialKey > should create partial key with all values
(skip) CompositeKeyUtils > createPartialKey > should create partial key stopping at undefined
(skip) CompositeKeyUtils > createPartialKey > should handle leading undefined
(skip) CompositeKeyUtils > createPartialKey > should handle all undefined
(skip) CompositeKeyUtils > createPartialKey > should include null values but stop at undefined
(skip) CompositeKeyUtils > Edge Cases > should handle very long compound keys
(skip) CompositeKeyUtils > Edge Cases > should handle special characters in values
(skip) CompositeKeyUtils > Edge Cases > should handle unicode characters
(skip) CompositeKeyUtils > Edge Cases > should maintain order consistency

src/__test__/wal-storage-integration.test.ts:
(skip) WAL Storage Integration > WALCollection Integration > should create WAL collection with transaction support
(skip) WAL Storage Integration > WALCollection Integration > should perform CRUD operations with WAL logging
(skip) WAL Storage Integration > WALCollection Integration > should handle persist operations in transactions
(skip) WAL Storage Integration > WALCollection Integration > should handle transaction rollback
(skip) WAL Storage Integration > WALCollection Integration > should support all IDataCollection methods
(skip) WAL Storage Integration > WALCollection Integration > should create and manage checkpoints
(skip) WAL Storage Integration > WALCollection Integration > should perform recovery
(skip) WAL Storage Integration > WALDatabase Integration > should create WAL database with transaction support
(skip) WAL Storage Integration > WALDatabase Integration > should create WAL-enhanced collections
(skip) WAL Storage Integration > WALDatabase Integration > should handle global transactions across collections
(skip) WAL Storage Integration > WALDatabase Integration > should handle global transaction rollback
(skip) WAL Storage Integration > WALDatabase Integration > should persist all collections with transaction support
(skip) WAL Storage Integration > WALDatabase Integration > should perform database-wide recovery
(skip) WAL Storage Integration > WALDatabase Integration > should create global checkpoints
(skip) WAL Storage Integration > WALDatabase Integration > should get WAL entries for debugging
(skip) WAL Storage Integration > WALDatabase Integration > should list WAL collections
(skip) WAL Storage Integration > WALDatabase Integration > should drop collections with WAL cleanup
(skip) WAL Storage Integration > Backward Compatibility > should work with transactions disabled
(skip) WAL Storage Integration > Backward Compatibility > should fallback to regular collections when transactions disabled

src/__test__/performance-benchmarks.test.ts:
(skip) Performance Benchmarks > WAL Manager Performance > should benchmark FileWALManager write performance
(skip) Performance Benchmarks > WAL Manager Performance > should benchmark MemoryWALManager write performance
(skip) Performance Benchmarks > WAL Manager Performance > should benchmark WAL read performance
(skip) Performance Benchmarks > WAL Manager Performance > should benchmark WAL recovery performance
(skip) Performance Benchmarks > WALCollection Performance > should benchmark collection create operations
(skip) Performance Benchmarks > WALCollection Performance > should benchmark transactional operations
(skip) Performance Benchmarks > WALCollection Performance > should benchmark find operations
(skip) Performance Benchmarks > WALCollection Performance > should benchmark persist operations
(skip) Performance Benchmarks > WALDatabase Performance > should benchmark database collection creation
(skip) Performance Benchmarks > WALDatabase Performance > should benchmark global transactions
(skip) Performance Benchmarks > WALDatabase Performance > should benchmark database persist operations
(skip) Performance Benchmarks > Memory Usage Benchmarks > should benchmark memory usage with large datasets
(skip) Performance Benchmarks > Memory Usage Benchmarks > should benchmark memory usage with concurrent transactions

src/__test__/replication-network.test.ts:
(skip) Replication Network Layer > Basic Network Operations > should create NetworkManager instances
(skip) Replication Network Layer > Basic Network Operations > should establish connections between nodes
(skip) Replication Network Layer > Basic Network Operations > should handle connection failures gracefully
(skip) Replication Network Layer > Message Communication > should send and receive messages
(skip) Replication Network Layer > Message Communication > should broadcast messages to multiple nodes
(skip) Replication Network Layer > Message Communication > should validate message checksums
(skip) Replication Network Layer > Connection Management > should track connected nodes
(skip) Replication Network Layer > Connection Management > should handle disconnections
(skip) Replication Network Layer > Connection Management > should emit connection events
(skip) Replication Network Layer > Error Handling > should handle invalid message formats
(skip) Replication Network Layer > Error Handling > should handle network timeouts
(skip) Replication Network Layer > Error Handling > should recover from connection failures
(skip) Replication Network Layer > Performance & Reliability > should handle multiple rapid connections
(skip) Replication Network Layer > Performance & Reliability > should maintain performance under load

src/__test__/autoinc-and-default-index.test.ts:
(skip) AutoInc and Default Index Tests > âœ… AutoInc ID Generation > should auto-generate sequential IDs when auto is true
(skip) AutoInc and Default Index Tests > âœ… AutoInc ID Generation > should use provided ID when auto is false
(skip) AutoInc and Default Index Tests > âœ… AutoInc ID Generation > should handle custom ID field name with autoinc
(skip) AutoInc and Default Index Tests > âœ… Default Index Creation > should automatically create unique required index for ID field
(skip) AutoInc and Default Index Tests > âœ… Default Index Creation > should create index with custom ID field name
(skip) AutoInc and Default Index Tests > âœ… Default Index Creation > should not override explicitly provided index for ID field
(skip) AutoInc and Default Index Tests > âœ… Edge Cases and Error Handling > should handle missing name in config
(skip) AutoInc and Default Index Tests > âœ… Edge Cases and Error Handling > should use default values when config is minimal
(skip) AutoInc and Default Index Tests > âœ… Edge Cases and Error Handling > should handle string ID configuration
(skip) AutoInc and Default Index Tests > âœ… Integration with Indexes > should work correctly with additional indexes
(skip) AutoInc and Default Index Tests > âœ… Integration with Indexes > should maintain index consistency during operations

src/__test__/single-key-sort-order.test.ts:
(skip) Single Key Sort Order Tests > Sort Order Validation > should validate ascending sort order
(skip) Single Key Sort Order Tests > Sort Order Validation > should validate descending sort order
(skip) Single Key Sort Order Tests > Sort Order Validation > should reject invalid sort orders
(skip) Single Key Sort Order Tests > Sort Order Normalization > should normalize valid sort orders to standard format
(skip) Single Key Sort Order Tests > Sort Order Normalization > should default to ascending for undefined
(skip) Single Key Sort Order Tests > Comparator Creation > should create ascending comparator for numbers
(skip) Single Key Sort Order Tests > Comparator Creation > should create descending comparator for numbers
(skip) Single Key Sort Order Tests > Comparator Creation > should handle string comparison
(skip) Single Key Sort Order Tests > Comparator Creation > should handle null and undefined values
(skip) Single Key Sort Order Tests > Comparator Creation > should handle mixed types with fallback to string comparison
(skip) Single Key Sort Order Tests > Edge Cases > should handle boolean values
(skip) Single Key Sort Order Tests > Edge Cases > should handle date objects
(skip) Single Key Sort Order Tests > Edge Cases > should handle array values

src/__test__/stress-testing.test.ts:
(skip) Stress Testing Suite > High Volume Operations > should handle high volume WAL writes
(skip) Stress Testing Suite > High Volume Operations > should handle concurrent transactions stress test
(skip) Stress Testing Suite > High Volume Operations > should handle large dataset operations
(skip) Stress Testing Suite > Long Running Operations > should handle long-running transaction stress
(skip) Stress Testing Suite > Long Running Operations > should handle database-wide stress operations
(skip) Stress Testing Suite > Memory Pressure Tests > should handle memory pressure scenarios
(skip) Stress Testing Suite > Memory Pressure Tests > should handle rapid allocation/deallocation
(skip) Stress Testing Suite > Error Recovery Stress > should handle transaction rollback stress

src/__test__/raft-state-machine.test.ts:
(skip) Raft State Machine > Initialization > should initialize successfully
(skip) Raft State Machine > Command Application > should apply CREATE command
(skip) Raft State Machine > Command Application > should apply UPDATE command
(skip) Raft State Machine > Command Application > should apply DELETE command
(skip) Raft State Machine > Command Application > should reject entries with invalid index
(skip) Raft State Machine > Transaction Commands > should handle transaction begin
(skip) Raft State Machine > Transaction Commands > should handle transaction commit
(skip) Raft State Machine > Snapshots > should create snapshot
(skip) Raft State Machine > Snapshots > should restore from snapshot
(skip) Raft State Machine > Snapshots > should trigger automatic snapshot
(skip) Raft State Machine > Read Operations > should perform read operations
(skip) Raft State Machine > Read Operations > should throw error for non-existent collection
(skip) Raft State Machine > State Management > should track last applied index
(skip) Raft State Machine > State Management > should not allow decreasing last applied index
(skip) Raft State Machine > Error Handling > should handle unknown command types
(skip) Raft State Machine > Metrics > should provide accurate metrics

src/__test__/raft-network-layer.test.ts:
(skip) Raft Network Layer > Initialization > should initialize with correct peer metrics
(skip) Raft Network Layer > Initialization > should report healthy status initially
(skip) Raft Network Layer > RPC Operations > should send RequestVote RPC successfully
(skip) Raft Network Layer > RPC Operations > should send AppendEntries RPC successfully
(skip) Raft Network Layer > RPC Operations > should send InstallSnapshot RPC successfully
(skip) Raft Network Layer > Retry Mechanism > should retry failed requests with exponential backoff
(skip) Raft Network Layer > Retry Mechanism > should respect maximum retry attempts
(skip) Raft Network Layer > Broadcast Operations > should broadcast to all peers
(skip) Raft Network Layer > Broadcast Operations > should handle majority requirement in broadcast
(skip) Raft Network Layer > Partition Detection > should detect network partitions
(skip) Raft Network Layer > Partition Detection > should track partition metrics
(skip) Raft Network Layer > Partition Detection > should handle partition recovery simulation
(skip) Raft Network Layer > Timeout Handling > should handle request timeouts
(skip) Raft Network Layer > Metrics > should track network metrics accurately
(skip) Raft Network Layer > Metrics > should track latency metrics
(skip) Raft Network Layer > Health Status > should report unhealthy when majority of peers are partitioned
(skip) Raft Network Layer > Health Status > should remain healthy with minority partitioned
(skip) Raft Network Layer > Error Handling > should handle unknown peer requests
(skip) Raft Network Layer > Error Handling > should emit appropriate events on failures
(skip) Raft Network Layer > Cleanup > should clean up resources properly

src/__test__/IndexManager.test.ts:
(skip) IndexManager > Basic Transaction Operations > should track insert operations in transaction
(skip) IndexManager > Basic Transaction Operations > should track remove operations in transaction
(skip) IndexManager > Basic Transaction Operations > should track multiple operations in transaction
(skip) IndexManager > Basic Transaction Operations > should maintain separate transaction contexts
(skip) IndexManager > Transaction View Operations > should return committed data for new transaction
(skip) IndexManager > Transaction View Operations > should include transaction inserts in view
(skip) IndexManager > Transaction View Operations > should exclude transaction removes from view
(skip) IndexManager > Transaction View Operations > should handle complex transaction view
(skip) IndexManager > 2PC Protocol - Prepare Phase > should prepare successfully with valid changes
(skip) IndexManager > 2PC Protocol - Prepare Phase > should prepare successfully with no changes
(skip) IndexManager > 2PC Protocol - Prepare Phase > should reject prepare for invalid insert
(skip) IndexManager > 2PC Protocol - Prepare Phase > should handle invalid remove gracefully
(skip) IndexManager > 2PC Protocol - Prepare Phase > should handle prepare errors gracefully
(skip) IndexManager > 2PC Protocol - Commit Phase > should commit successfully after prepare
(skip) IndexManager > 2PC Protocol - Commit Phase > should apply multiple changes in commit
(skip) IndexManager > 2PC Protocol - Commit Phase > should throw error if committing unprepared transaction
(skip) IndexManager > 2PC Protocol - Commit Phase > should cleanup transaction data after commit
(skip) IndexManager > 2PC Protocol - Rollback > should rollback transaction without applying changes
(skip) IndexManager > 2PC Protocol - Rollback > should rollback prepared transaction
(skip) IndexManager > 2PC Protocol - Rollback > should cleanup transaction data after rollback
(skip) IndexManager > 2PC Protocol - Rollback > should handle rollback of non-existent transaction
(skip) IndexManager > Backward Compatibility > should support non-transactional insert
(skip) IndexManager > Backward Compatibility > should support non-transactional remove
(skip) IndexManager > Backward Compatibility > should support non-transactional findFirst
(skip) IndexManager > Backward Compatibility > should support non-transactional findAll
(skip) IndexManager > Backward Compatibility > should support tree properties access
(skip) IndexManager > Error Handling and Edge Cases > should handle empty transaction gracefully
(skip) IndexManager > Error Handling and Edge Cases > should handle multiple operations on same key
(skip) IndexManager > Error Handling and Edge Cases > should maintain transaction isolation

src/__test__/CSDatabase.savepoint.test.ts:
(skip) CSDatabase Savepoint Support > createSavepoint > should require active transaction
(skip) CSDatabase Savepoint Support > createSavepoint > should create savepoint with unique ID
(skip) CSDatabase Savepoint Support > createSavepoint > should snapshot collection data
(skip) CSDatabase Savepoint Support > createSavepoint > should handle multiple savepoints
(skip) CSDatabase Savepoint Support > createSavepoint > should reject duplicate savepoint names
(skip) CSDatabase Savepoint Support > rollbackToSavepoint > should require active transaction
(skip) CSDatabase Savepoint Support > rollbackToSavepoint > should restore collection data
(skip) CSDatabase Savepoint Support > rollbackToSavepoint > should handle nested savepoints correctly
(skip) CSDatabase Savepoint Support > rollbackToSavepoint > should throw error for non-existent savepoint
(skip) CSDatabase Savepoint Support > releaseSavepoint > should require active transaction
(skip) CSDatabase Savepoint Support > releaseSavepoint > should remove savepoint data
(skip) CSDatabase Savepoint Support > releaseSavepoint > should handle release of non-existent savepoint
(skip) CSDatabase Savepoint Support > releaseSavepoint > should not affect collection state
(skip) CSDatabase Savepoint Support > listSavepoints and getSavepointInfo > should return empty list when no transaction
(skip) CSDatabase Savepoint Support > listSavepoints and getSavepointInfo > should list savepoints with timestamps
(skip) CSDatabase Savepoint Support > listSavepoints and getSavepointInfo > should provide detailed savepoint info
(skip) CSDatabase Savepoint Support > transaction cleanup > should clear savepoints on commit
(skip) CSDatabase Savepoint Support > transaction cleanup > should clear savepoints on abort
(skip) CSDatabase Savepoint Support > transaction cleanup > should handle multiple collections in savepoint
(skip) CSDatabase Savepoint Support > error handling > should handle rollback errors gracefully
(skip) CSDatabase Savepoint Support > error handling > should handle concurrent savepoint operations

src/__test__/query-advanced.test.ts:
(skip) Query Advanced Features Tests > Regular Expression Queries > should find users by email domain using regex
(skip) Query Advanced Features Tests > Regular Expression Queries > should find users by name pattern using string regex
(skip) Query Advanced Features Tests > Regular Expression Queries > should find users by bio content using case-insensitive regex
(skip) Query Advanced Features Tests > Regular Expression Queries > should find users with specific skills using regex
(skip) Query Advanced Features Tests > Nested Field Queries > should query nested object fields
(skip) Query Advanced Features Tests > Nested Field Queries > should query deeply nested fields with comparison operators
(skip) Query Advanced Features Tests > Nested Field Queries > should query nested array fields
(skip) Query Advanced Features Tests > Nested Field Queries > should query nested date fields
(skip) Query Advanced Features Tests > Array Element Matching > should find users with all specified skills using $all
(skip) Query Advanced Features Tests > Array Element Matching > should find users with specific number of skills using $size
(skip) Query Advanced Features Tests > Array Element Matching > should find users with skills containing specific pattern using $elemMatch
(skip) Query Advanced Features Tests > Modulo and Mathematical Operators > should find users with even login counts using $mod
(skip) Query Advanced Features Tests > Modulo and Mathematical Operators > should find users with login count remainder 1 when divided by 3
(skip) Query Advanced Features Tests > Type Checking > should find fields of specific types
(skip) Query Advanced Features Tests > Type Checking > should find boolean fields
(skip) Query Advanced Features Tests > Type Checking > should find date fields
(skip) Query Advanced Features Tests > Type Checking > should find array fields
(skip) Query Advanced Features Tests > Complex Logical Combinations > should find verified users with high ratings and recent activity
(skip) Query Advanced Features Tests > Complex Logical Combinations > should find users who are either new or very active
(skip) Query Advanced Features Tests > Complex Logical Combinations > should find users with complex skill requirements
(skip) Query Advanced Features Tests > Edge Cases and Error Handling > should handle queries on non-existent nested fields
(skip) Query Advanced Features Tests > Edge Cases and Error Handling > should handle mixed type comparisons gracefully
(skip) Query Advanced Features Tests > Edge Cases and Error Handling > should handle empty arrays in $in operator
(skip) Query Advanced Features Tests > Edge Cases and Error Handling > should handle null values in nested queries
(skip) Query Advanced Features Tests > Performance with Complex Queries > should handle deeply nested queries efficiently
(skip) Query Advanced Features Tests > Performance with Complex Queries > should handle multiple regex patterns efficiently

src/__test__/raft-log-manager.test.ts:
(skip) Raft Log Manager > Basic Operations > should initialize successfully
(skip) Raft Log Manager > Basic Operations > should append single entry
(skip) Raft Log Manager > Basic Operations > should append multiple entries
(skip) Raft Log Manager > Commit Index Management > should set commit index
(skip) Raft Log Manager > Commit Index Management > should not allow decreasing commit index
(skip) Raft Log Manager > Metrics > should provide accurate metrics

src/__test__/memory-adapter-selection.test.ts:
(skip) Memory Adapter Selection Tests > âœ… CSDatabase dbName: ":memory:" Support > should use AdapterMemory when dbName is ":memory:"
(skip) Memory Adapter Selection Tests > âœ… CSDatabase dbName: ":memory:" Support > should use AdapterFile when dbName is not ":memory:"
(skip) Memory Adapter Selection Tests > âœ… CSDatabase dbName: ":memory:" Support > should work correctly with in-memory collections
(skip) Memory Adapter Selection Tests > âœ… CSDatabase dbName: ":memory:" Support > should handle multiple collections in memory database
(skip) Memory Adapter Selection Tests > âœ… Collection.create() dbName Support > should support dbName option in Collection.create()
(skip) Memory Adapter Selection Tests > âœ… Collection.create() dbName Support > should use AdapterMemory when dbName is not ":memory:"
(skip) Memory Adapter Selection Tests > âœ… Collection.create() dbName Support > should use default adapter when dbName is not specified
(skip) Memory Adapter Selection Tests > âœ… MikroORM Convention Compatibility > should follow MikroORM convention for :memory: databases
(skip) Memory Adapter Selection Tests > âœ… MikroORM Convention Compatibility > should support different memory database names

src/auth/tests/RoleManager.test.ts:
(skip) RoleManager > System Roles > should initialize system roles
(skip) RoleManager > System Roles > should identify system roles correctly
(skip) RoleManager > Role CRUD Operations > should create a new role
(skip) RoleManager > Role CRUD Operations > should not create role with duplicate name
(skip) RoleManager > Role CRUD Operations > should get role by ID
(skip) RoleManager > Role CRUD Operations > should get role by name
(skip) RoleManager > Role CRUD Operations > should update role
(skip) RoleManager > Role CRUD Operations > should not update system role
(skip) RoleManager > Role CRUD Operations > should delete role
(skip) RoleManager > Role CRUD Operations > should not delete system role
(skip) RoleManager > Role CRUD Operations > should list roles with pagination
(skip) RoleManager > Role CRUD Operations > should search roles by name
(skip) RoleManager > Validation > should validate role data correctly
(skip) RoleManager > Validation > should reject invalid role data
(skip) RoleManager > Validation > should validate permission correctly
(skip) RoleManager > Validation > should reject invalid permission
(skip) RoleManager > Validation > should validate role name uniqueness
(skip) RoleManager > Cache Management > should clear role cache
(skip) RoleManager > Cache Management > should clear permission cache
(skip) RoleManager > Cache Management > should refresh hierarchy cache

src/auth/tests/UserManager.test.ts:
(skip) UserManager > User Creation > should create user successfully
(skip) UserManager > User Creation > should reject duplicate email
(skip) UserManager > User Creation > should reject weak password
(skip) UserManager > User Creation > should reject invalid email
(skip) UserManager > User Retrieval > should get user by ID
(skip) UserManager > User Retrieval > should get user by email
(skip) UserManager > User Retrieval > should return undefined for non-existent user
(skip) UserManager > User Updates > should update user data
(skip) UserManager > User Updates > should update user email
(skip) UserManager > User Updates > should reject duplicate email on update
(skip) UserManager > Password Management > should verify correct password
(skip) UserManager > Password Management > should reject incorrect password
(skip) UserManager > Password Management > should change password
(skip) UserManager > Password Management > should reject password change with wrong current password
(skip) UserManager > Password Management > should reset password
(skip) UserManager > User Status Management > should deactivate user
(skip) UserManager > User Status Management > should activate user
(skip) UserManager > User Status Management > should lock user
(skip) UserManager > User Status Management > should unlock user
(skip) UserManager > Role Management > should assign role to user
(skip) UserManager > Role Management > should remove role from user
(skip) UserManager > User Attributes > should set user attribute
(skip) UserManager > User Attributes > should get all user attributes
(skip) UserManager > User Attributes > should remove user attribute
(skip) UserManager > User Search > should find users by criteria
(skip) UserManager > User Search > should search users by text
(skip) UserManager > User Search > should list users with pagination
(skip) UserManager > Validation > should validate email availability
(skip) UserManager > Validation > should validate password strength
(skip) UserManager > Statistics > should get user statistics

src/auth/tests/SessionManager.test.ts:
(skip) SessionManager > Session CRUD Operations > should create a new session
(skip) SessionManager > Session CRUD Operations > should get session by ID
(skip) SessionManager > Session CRUD Operations > should return null for non-existent session
(skip) SessionManager > Session CRUD Operations > should update session
(skip) SessionManager > Session CRUD Operations > should delete session
(skip) SessionManager > Session Validation > should validate active session
(skip) SessionManager > Session Validation > should reject non-existent session
(skip) SessionManager > Session Validation > should reject expired session
(skip) SessionManager > Session Validation > should refresh session
(skip) SessionManager > User Sessions Management > should get user sessions
(skip) SessionManager > User Sessions Management > should get active sessions count
(skip) SessionManager > User Sessions Management > should terminate all user sessions
(skip) SessionManager > User Sessions Management > should terminate sessions except excluded one
(skip) SessionManager > Session Security > should check suspicious activity
(skip) SessionManager > Session Security > should log security events
(skip) SessionManager > Session Security > should filter security events
(skip) SessionManager > Session Policy > should set and get session policy
(skip) SessionManager > Session Policy > should enforce concurrent sessions limit
(skip) SessionManager > Session Policy > should enforce session policy
(skip) SessionManager > Session Termination by Criteria > should terminate sessions by IP address
(skip) SessionManager > Session Termination by Criteria > should terminate sessions by device type

src/auth/tests/AuditLogger.test.ts:
(skip) AuditLogger > Core Logging Operations > should log authentication events
(skip) AuditLogger > Core Logging Operations > should log authorization events
(skip) AuditLogger > Core Logging Operations > should log user management events
(skip) AuditLogger > Core Logging Operations > should log role management events
(skip) AuditLogger > Core Logging Operations > should log session events
(skip) AuditLogger > Core Logging Operations > should log security events
(skip) AuditLogger > Core Logging Operations > should log generic events
(skip) AuditLogger > Batch Operations > should handle batch logging
(skip) AuditLogger > Batch Operations > should handle batch logger interface
(skip) AuditLogger > Batch Operations > should auto-flush when batch size is reached
(skip) AuditLogger > Query Operations > should query logs by user ID
(skip) AuditLogger > Query Operations > should query logs by action
(skip) AuditLogger > Query Operations > should query logs by multiple actions
(skip) AuditLogger > Query Operations > should query logs by category
(skip) AuditLogger > Query Operations > should query logs by result/outcome
(skip) AuditLogger > Query Operations > should handle pagination
(skip) AuditLogger > Query Operations > should sort logs
(skip) AuditLogger > Specialized Query Methods > should get user activity
(skip) AuditLogger > Specialized Query Methods > should get resource access logs
(skip) AuditLogger > Specialized Query Methods > should get failed attempts
(skip) AuditLogger > Specialized Query Methods > should get security events
(skip) AuditLogger > Specialized Query Methods > should filter security events by severity
(skip) AuditLogger > Analytics and Reporting > should generate activity summary
(skip) AuditLogger > Analytics and Reporting > should generate security report
(skip) AuditLogger > Analytics and Reporting > should get user behavior analytics
(skip) AuditLogger > Analytics and Reporting > should get usage statistics
(skip) AuditLogger > Configuration and Monitoring > should get and update configuration
(skip) AuditLogger > Configuration and Monitoring > should get statistics
(skip) AuditLogger > Configuration and Monitoring > should test logging functionality
(skip) AuditLogger > Real-time Monitoring > should handle subscriptions
(skip) AuditLogger > Real-time Monitoring > should filter subscription events correctly
(skip) AuditLogger > Real-time Monitoring > should get active subscriptions
(skip) AuditLogger > Time Range Filtering > should filter logs by time range

src/auth/tests/TokenManager.test.ts:
(skip) TokenManager > Token Generation > should generate token pair successfully
(skip) TokenManager > Token Generation > should generate access token successfully
(skip) TokenManager > Token Generation > should generate refresh token successfully
(skip) TokenManager > Token Generation > should generate API key successfully
(skip) TokenManager > Token Validation > should validate access token successfully
(skip) TokenManager > Token Validation > should validate refresh token successfully
(skip) TokenManager > Token Validation > should validate API key successfully
(skip) TokenManager > Token Validation > should reject invalid token
(skip) TokenManager > Token Metadata > should extract token metadata correctly
(skip) TokenManager > Token Metadata > should extract token claims correctly
(skip) TokenManager > Configuration > should validate key configuration
(skip) TokenManager > Configuration > should test token generation
(skip) TokenManager > Token Expiration > should check token expiration correctly
(skip) TokenManager > Token Expiration > should get token expiration time
(skip) TokenManager > Statistics > should get token statistics
(skip) TokenManager > Statistics > should get token metrics

src/filestorage/tests/CompressionEngine.test.ts:
(skip) CompressionEngine > Initialization > should initialize with default configuration
(skip) CompressionEngine > Initialization > should initialize with custom configuration
(skip) CompressionEngine > Initialization > should initialize with empty stats
(skip) CompressionEngine > Basic Compression > should compress data with gzip
(skip) CompressionEngine > Basic Compression > should compress data with deflate
(skip) CompressionEngine > Basic Compression > should compress data with brotli
(skip) CompressionEngine > Basic Compression > should handle no compression
(skip) CompressionEngine > Basic Compression > should use default algorithm when not specified
(skip) CompressionEngine > Basic Compression > should compress stream data
(skip) CompressionEngine > Decompression > should decompress gzip data
(skip) CompressionEngine > Decompression > should decompress deflate data
(skip) CompressionEngine > Decompression > should decompress brotli data
(skip) CompressionEngine > Decompression > should handle no decompression
(skip) CompressionEngine > Decompression > should decompress stream data
(skip) CompressionEngine > Compression Levels > should compress with different levels
(skip) CompressionEngine > Compression Levels > should compress brotli with different levels
(skip) CompressionEngine > Batch Compression > should compress multiple files
(skip) CompressionEngine > Batch Compression > should compress batch with different options
(skip) CompressionEngine > Streaming > should create compression stream
(skip) CompressionEngine > Streaming > should create decompression stream
(skip) CompressionEngine > Streaming > should process data through compression stream
(skip) CompressionEngine > Auto Algorithm Selection > should auto-select algorithm based on data size
(skip) CompressionEngine > Compression Threshold > should skip compression for small files
(skip) CompressionEngine > Compression Threshold > should compress files above threshold
(skip) CompressionEngine > Job Management > should track job status
(skip) CompressionEngine > Job Management > should clear completed jobs
(skip) CompressionEngine > Statistics > should track compression statistics
(skip) CompressionEngine > Statistics > should not track stats when disabled
(skip) CompressionEngine > Configuration Management > should update configuration
(skip) CompressionEngine > Event Emission > should emit compression events
(skip) CompressionEngine > Event Emission > should emit decompression events
(skip) CompressionEngine > Error Handling > should handle invalid compression algorithm
(skip) CompressionEngine > Error Handling > should handle invalid decompression algorithm
(skip) CompressionEngine > Error Handling > should emit error events on failure
(skip) CompressionEngine > Error Handling > should track failed jobs in statistics
(skip) CompressionEngine > Error Handling > should handle corrupted compressed data
(skip) CompressionEngine > Performance > should handle large data efficiently
(skip) CompressionEngine > Performance > should handle concurrent compressions
(skip) CompressionEngine > Round-trip Integrity > should maintain data integrity through compression/decompression cycle
(skip) CompressionEngine > Round-trip Integrity > should handle binary data correctly
(skip) CompressionEngine > Round-trip Integrity > should handle empty data

src/filestorage/tests/FileStorageIntegration.test.ts:
(skip) File Storage Component Integration > Replication Integration > should replicate files across cluster nodes
(skip) File Storage Component Integration > Replication Integration > should handle replication of different file types with appropriate strategies
(skip) File Storage Component Integration > Compression Integration > should compress data successfully
(skip) File Storage Component Integration > Compression Integration > should handle different compression algorithms
(skip) File Storage Component Integration > Multi-Component Performance Integration > should handle concurrent operations across components
(skip) File Storage Component Integration > Multi-Component Performance Integration > should maintain data integrity across component interactions
(skip) File Storage Component Integration > Error Handling Integration > should handle component failures gracefully
(skip) File Storage Component Integration > Error Handling Integration > should maintain system stability during failures
(skip) File Storage Component Integration > Configuration Integration > should handle configuration updates across components
(skip) File Storage Component Integration > Health Monitoring Integration > should monitor system health across components
(skip) File Storage Component Integration > Health Monitoring Integration > should handle health check failures gracefully

src/filestorage/tests/ThumbnailGenerator.test.ts:
(skip) ThumbnailGenerator > Initialization > should initialize with default configuration
(skip) ThumbnailGenerator > Initialization > should initialize with custom configuration
(skip) ThumbnailGenerator > Initialization > should emit initialized event
(skip) ThumbnailGenerator > Initialization > should verify dependencies during initialization
(skip) ThumbnailGenerator > Single Thumbnail Generation > should generate single thumbnail for image
(skip) ThumbnailGenerator > Single Thumbnail Generation > should generate thumbnail with custom options
(skip) ThumbnailGenerator > Single Thumbnail Generation > should use default options when not specified
(skip) ThumbnailGenerator > Single Thumbnail Generation > should throw error when generation fails
(skip) ThumbnailGenerator > Multiple Thumbnail Generation > should generate multiple thumbnails for different sizes
(skip) ThumbnailGenerator > Multiple Thumbnail Generation > should generate thumbnails with different formats
(skip) ThumbnailGenerator > Multiple Thumbnail Generation > should handle partial failures gracefully
(skip) ThumbnailGenerator > Multiple Thumbnail Generation > should return empty array when no thumbnails can be generated
(skip) ThumbnailGenerator > Buffer Processing > should generate thumbnails from buffer
(skip) ThumbnailGenerator > Buffer Processing > should handle different MIME types from buffer
(skip) ThumbnailGenerator > Buffer Processing > should cleanup temporary resources after buffer processing
(skip) ThumbnailGenerator > Job Management > should track active jobs
(skip) ThumbnailGenerator > Job Management > should provide job status
(skip) ThumbnailGenerator > Job Management > should cancel pending jobs
(skip) ThumbnailGenerator > Job Management > should return false when cancelling non-existent job
(skip) ThumbnailGenerator > Caching > should cache generated thumbnails
(skip) ThumbnailGenerator > Caching > should respect cache disabled setting
(skip) ThumbnailGenerator > Caching > should clear cache
(skip) ThumbnailGenerator > Caching > should emit cache cleared event
(skip) ThumbnailGenerator > Configuration Management > should update configuration
(skip) ThumbnailGenerator > Configuration Management > should emit config updated event
(skip) ThumbnailGenerator > Configuration Management > should preserve existing config when updating
(skip) ThumbnailGenerator > Event Emission > should emit job events during processing
(skip) ThumbnailGenerator > Event Emission > should emit job failed event on error
(skip) ThumbnailGenerator > File Type Support > should support image files
(skip) ThumbnailGenerator > File Type Support > should support video files
(skip) ThumbnailGenerator > File Type Support > should support document files
(skip) ThumbnailGenerator > Performance > should handle multiple thumbnail requests efficiently
(skip) ThumbnailGenerator > Performance > should handle large thumbnail sizes efficiently
(skip) ThumbnailGenerator > Error Handling > should handle file metadata errors gracefully
(skip) ThumbnailGenerator > Error Handling > should handle processing errors for individual sizes
(skip) ThumbnailGenerator > Error Handling > should handle dependency verification errors

src/filestorage/tests/FileMetadataManager.test.ts:
(skip) FileMetadataManager > Initialization and Lifecycle > should initialize successfully
(skip) FileMetadataManager > Initialization and Lifecycle > should handle multiple initialization calls
(skip) FileMetadataManager > Initialization and Lifecycle > should shutdown gracefully
(skip) FileMetadataManager > CRUD Operations > Create > should create file metadata successfully
(skip) FileMetadataManager > CRUD Operations > Create > should reject invalid metadata
(skip) FileMetadataManager > CRUD Operations > Create > should validate required fields
(skip) FileMetadataManager > CRUD Operations > Create > should validate access levels
(skip) FileMetadataManager > CRUD Operations > Create > should validate file size
(skip) FileMetadataManager > CRUD Operations > Read > should retrieve file metadata by ID
(skip) FileMetadataManager > CRUD Operations > Read > should return null for non-existent file
(skip) FileMetadataManager > CRUD Operations > Read > should use getRequired for mandatory retrieval
(skip) FileMetadataManager > CRUD Operations > Read > should throw FileNotFoundError for getRequired with non-existent file
(skip) FileMetadataManager > CRUD Operations > Read > should use cache for repeated reads
(skip) FileMetadataManager > CRUD Operations > Update > should update file metadata
(skip) FileMetadataManager > CRUD Operations > Update > should prevent ID changes
(skip) FileMetadataManager > CRUD Operations > Update > should validate updated metadata
(skip) FileMetadataManager > CRUD Operations > Update > should throw FileNotFoundError for non-existent file
(skip) FileMetadataManager > CRUD Operations > Update > should update cache after update
(skip) FileMetadataManager > CRUD Operations > Delete > should delete file metadata
(skip) FileMetadataManager > CRUD Operations > Delete > should throw FileNotFoundError for non-existent file
(skip) FileMetadataManager > CRUD Operations > Delete > should remove from cache after deletion
(skip) FileMetadataManager > Query Operations > List > should list all files without filters
(skip) FileMetadataManager > Query Operations > List > should filter by owner
(skip) FileMetadataManager > Query Operations > List > should filter by MIME type
(skip) FileMetadataManager > Query Operations > List > should filter by access level
(skip) FileMetadataManager > Query Operations > List > should filter by size range
(skip) FileMetadataManager > Query Operations > List > should apply pagination
(skip) FileMetadataManager > Query Operations > List > should sort by size descending
(skip) FileMetadataManager > Query Operations > List > should combine multiple filters
(skip) FileMetadataManager > Query Operations > Search > should search by filename
(skip) FileMetadataManager > Query Operations > Search > should search by MIME type
(skip) FileMetadataManager > Query Operations > Search > should search by owner
(skip) FileMetadataManager > Query Operations > Search > should search by size range
(skip) FileMetadataManager > Query Operations > Search > should search by date range
(skip) FileMetadataManager > Query Operations > Count > should count all files
(skip) FileMetadataManager > Query Operations > Count > should count with filters
(skip) FileMetadataManager > Utility Operations > should get expired files
(skip) FileMetadataManager > Utility Operations > should get files by owner
(skip) FileMetadataManager > Utility Operations > should get files by MIME type
(skip) FileMetadataManager > Utility Operations > should get recent files
(skip) FileMetadataManager > Utility Operations > should get largest files
(skip) FileMetadataManager > Statistics > should calculate storage statistics
(skip) FileMetadataManager > Statistics > should handle empty collection statistics
(skip) FileMetadataManager > Caching > should cache metadata after retrieval
(skip) FileMetadataManager > Caching > should update cache after metadata update
(skip) FileMetadataManager > Caching > should remove from cache after deletion
(skip) FileMetadataManager > Error Handling > should handle database connection errors gracefully
(skip) FileMetadataManager > Error Handling > should emit events for operations
(skip) FileMetadataManager > Performance > should handle bulk operations efficiently
(skip) FileMetadataManager > Performance > should handle concurrent operations

src/filestorage/tests/StreamingManager.test.ts:
(skip) StreamingManager > Configuration > should initialize with default configuration
(skip) StreamingManager > Configuration > should update configuration
(skip) StreamingManager > Configuration > should emit config update events
(skip) StreamingManager > Upload Streaming > should create upload stream for small file
(skip) StreamingManager > Upload Streaming > should create chunked upload stream for large file
(skip) StreamingManager > Upload Streaming > should track upload progress
(skip) StreamingManager > Upload Streaming > should emit stream events
(skip) StreamingManager > Upload Streaming > should handle stream cancellation
(skip) StreamingManager > Download Streaming > should create download stream
(skip) StreamingManager > Download Streaming > should support range downloads
(skip) StreamingManager > Download Streaming > should chunk large downloads
(skip) StreamingManager > Download Streaming > should emit download events
(skip) StreamingManager > Stream Transformations > should apply single transformation
(skip) StreamingManager > Stream Transformations > should apply multiple transformations
(skip) StreamingManager > Stream Transformations > should handle transformation with finalization
(skip) StreamingManager > Stream Transformations > should emit transformation events
(skip) StreamingManager > Stream Merging > should merge multiple streams
(skip) StreamingManager > Stream Merging > should handle empty streams in merge
(skip) StreamingManager > Stream Merging > should emit merge events
(skip) StreamingManager > Stream Splitting > should split stream by size
(skip) StreamingManager > Stream Splitting > should handle small data that fits in one stream
(skip) StreamingManager > Stream Management > should track active streams
(skip) StreamingManager > Stream Management > should provide stream statistics
(skip) StreamingManager > Stream Management > should cancel specific stream
(skip) StreamingManager > Stream Management > should cancel all streams
(skip) StreamingManager > Stream Management > should return false when cancelling non-existent stream
(skip) StreamingManager > Error Handling > should handle stream errors gracefully
(skip) StreamingManager > Error Handling > should handle transformation errors
(skip) StreamingManager > Performance > should handle large files efficiently
(skip) StreamingManager > Performance > should handle concurrent streams

src/filestorage/tests/FileStorageManager.test.ts:
(skip) FileStorageManager > Initialization and Lifecycle > should initialize successfully with valid config
(skip) FileStorageManager > Initialization and Lifecycle > should handle multiple initialization calls gracefully
(skip) FileStorageManager > Initialization and Lifecycle > should emit initialization events
(skip) FileStorageManager > Initialization and Lifecycle > should throw error when using uninitialized manager
(skip) FileStorageManager > File Upload Operations > should upload a simple text file successfully
(skip) FileStorageManager > File Upload Operations > should generate file ID and checksum automatically
(skip) FileStorageManager > File Upload Operations > should validate file size limits
(skip) FileStorageManager > File Upload Operations > should validate blocked mime types
(skip) FileStorageManager > File Upload Operations > should check user quota limits
(skip) FileStorageManager > File Upload Operations > should emit upload events
(skip) FileStorageManager > File Download Operations > should download file successfully
(skip) FileStorageManager > File Download Operations > should support range downloads
(skip) FileStorageManager > File Download Operations > should check access permissions
(skip) FileStorageManager > File Download Operations > should handle non-existent files
(skip) FileStorageManager > File Download Operations > should emit download events
(skip) FileStorageManager > File Metadata Operations > should retrieve file metadata
(skip) FileStorageManager > File Metadata Operations > should update file metadata
(skip) FileStorageManager > File Metadata Operations > should list user files with filters
(skip) FileStorageManager > File Deletion Operations > should delete file successfully
(skip) FileStorageManager > File Deletion Operations > should check delete permissions
(skip) FileStorageManager > File Deletion Operations > should emit delete events
(skip) FileStorageManager > File Deletion Operations > should handle deletion of non-existent files
(skip) FileStorageManager > Thumbnail Generation > should generate single thumbnail
(skip) FileStorageManager > Thumbnail Generation > should generate multiple thumbnails
(skip) FileStorageManager > Thumbnail Generation > should reject thumbnail generation for non-image files
(skip) FileStorageManager > Health and Monitoring > should report healthy status when backends are working
(skip) FileStorageManager > Health and Monitoring > should provide storage statistics
(skip) FileStorageManager > Health and Monitoring > should track user storage usage
(skip) FileStorageManager > Performance Benchmarks > should handle concurrent uploads efficiently
(skip) FileStorageManager > Performance Benchmarks > should maintain performance under load

src/filestorage/tests/FileReplicationManager.test.ts:
(skip) FileReplicationManager > Initialization and Lifecycle > should initialize successfully with valid config
(skip) FileReplicationManager > Initialization and Lifecycle > should handle multiple initialization calls gracefully
(skip) FileReplicationManager > Initialization and Lifecycle > should emit initialization events
(skip) FileReplicationManager > Initialization and Lifecycle > should shutdown gracefully
(skip) FileReplicationManager > File Replication Operations > should replicate file to target nodes successfully
(skip) FileReplicationManager > File Replication Operations > should select appropriate strategy based on file metadata
(skip) FileReplicationManager > File Replication Operations > should handle replication to multiple nodes
(skip) FileReplicationManager > File Replication Operations > should reject replication with no target nodes
(skip) FileReplicationManager > File Replication Operations > should prevent duplicate replication jobs
(skip) FileReplicationManager > File Replication Operations > should emit WAL entries when enabled
(skip) FileReplicationManager > Job Management > should track active replication jobs
(skip) FileReplicationManager > Job Management > should provide job status information
(skip) FileReplicationManager > Job Management > should update statistics correctly
(skip) FileReplicationManager > File Synchronization > should sync files from source node
(skip) FileReplicationManager > File Synchronization > should handle sync failures gracefully
(skip) FileReplicationManager > File Synchronization > should emit sync progress events
(skip) FileReplicationManager > Health Monitoring > should check replication health
(skip) FileReplicationManager > Health Monitoring > should emit node health change events
(skip) FileReplicationManager > Orphaned File Cleanup > should cleanup orphaned files
(skip) FileReplicationManager > Orphaned File Cleanup > should emit orphaned file removal events
(skip) FileReplicationManager > Configuration Management > should update configuration
(skip) FileReplicationManager > Configuration Management > should preserve existing config when updating
(skip) FileReplicationManager > Error Handling > should throw error when not initialized
(skip) FileReplicationManager > Error Handling > should handle replication failures with retry
(skip) FileReplicationManager > Error Handling > should emit replication failed events
(skip) FileReplicationManager > Performance > should handle concurrent replications efficiently
(skip) FileReplicationManager > Performance > should maintain performance under load
(skip) FileReplicationManager > Strategy Selection > should use direct strategy for small files
(skip) FileReplicationManager > Strategy Selection > should use chunked strategy for large files
(skip) FileReplicationManager > Strategy Selection > should use streaming strategy for media files

src/filestorage/tests/PerformanceMonitor.test.ts:
(skip) FileStoragePerformanceMonitor > Initialization and Lifecycle > should initialize with default configuration
(skip) FileStoragePerformanceMonitor > Initialization and Lifecycle > should initialize with custom configuration
(skip) FileStoragePerformanceMonitor > Initialization and Lifecycle > should start and stop successfully
(skip) FileStoragePerformanceMonitor > Initialization and Lifecycle > should handle multiple start/stop calls gracefully
(skip) FileStoragePerformanceMonitor > Operation Measurement > should measure successful operations
(skip) FileStoragePerformanceMonitor > Operation Measurement > should measure failed operations
(skip) FileStoragePerformanceMonitor > Operation Measurement > should include metadata in measurements
(skip) FileStoragePerformanceMonitor > Operation Measurement > should skip measurement when metrics disabled
(skip) FileStoragePerformanceMonitor > Metrics Collection and Statistics > should calculate correct statistics
(skip) FileStoragePerformanceMonitor > Metrics Collection and Statistics > should calculate percentiles correctly
(skip) FileStoragePerformanceMonitor > Metrics Collection and Statistics > should track memory usage
(skip) FileStoragePerformanceMonitor > Metrics Collection and Statistics > should return null for non-existent operations
(skip) FileStoragePerformanceMonitor > Multiple Operations and Summary > should get all metrics
(skip) FileStoragePerformanceMonitor > Multiple Operations and Summary > should provide operation summary
(skip) FileStoragePerformanceMonitor > Multiple Operations and Summary > should handle empty metrics in summary
(skip) FileStoragePerformanceMonitor > Metrics History Management > should limit metrics history
(skip) FileStoragePerformanceMonitor > Metrics History Management > should clear specific operation metrics
(skip) FileStoragePerformanceMonitor > Metrics History Management > should clear all metrics
(skip) FileStoragePerformanceMonitor > Configuration Management > should update configuration
(skip) FileStoragePerformanceMonitor > Configuration Management > should preserve existing config when updating
(skip) FileStoragePerformanceMonitor > Alert System > should emit duration alerts
(skip) FileStoragePerformanceMonitor > Alert System > should emit memory alerts
(skip) FileStoragePerformanceMonitor > Alert System > should emit success rate alerts
(skip) FileStoragePerformanceMonitor > Alert System > should not emit alerts when disabled
(skip) FileStoragePerformanceMonitor > Metrics Aggregation > should emit aggregated metrics
(skip) FileStoragePerformanceMonitor > Metrics Aggregation > should not start aggregation timer when interval is 0
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure file upload operations
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure file download operations
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure file delete operations
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure metadata operations
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure compression operations
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure replication operations
(skip) FileStoragePerformanceMonitor > Utility Methods > should measure thumbnail generation operations
(skip) FileStoragePerformanceMonitor > Performance and Load Testing > should handle concurrent measurements efficiently
(skip) FileStoragePerformanceMonitor > Performance and Load Testing > should maintain performance under load
(skip) FileStoragePerformanceMonitor > Performance and Load Testing > should handle memory efficiently during extended use
(skip) FileStoragePerformanceMonitor > Error Handling and Edge Cases > should handle operations that throw non-Error objects
(skip) FileStoragePerformanceMonitor > Error Handling and Edge Cases > should handle operations that return undefined
(skip) FileStoragePerformanceMonitor > Error Handling and Edge Cases > should handle very fast operations
(skip) FileStoragePerformanceMonitor > Error Handling and Edge Cases > should handle operations with zero duration

src/filestorage/tests/FileIdGenerator.test.ts:
(skip) FileIdGenerator > UUID Strategy > should generate valid UUID v4 format
(skip) FileIdGenerator > UUID Strategy > should generate unique IDs under high load
(skip) FileIdGenerator > UUID Strategy > should handle concurrent ID generation
(skip) FileIdGenerator > UUID Strategy > should validate UUID format correctly
(skip) FileIdGenerator > Timestamp Counter Strategy > should generate sortable IDs with timestamp
(skip) FileIdGenerator > Timestamp Counter Strategy > should handle rapid generation within same millisecond
(skip) FileIdGenerator > Timestamp Counter Strategy > should include node ID and counter in generated IDs
(skip) FileIdGenerator > Timestamp Counter Strategy > should validate timestamp counter format correctly
(skip) FileIdGenerator > Hybrid Strategy > should generate IDs with timestamp, random, node, and counter components
(skip) FileIdGenerator > Hybrid Strategy > should provide best collision resistance under extreme load
(skip) FileIdGenerator > Hybrid Strategy > should maintain sortability while adding randomness
(skip) FileIdGenerator > Global Generator Functions > should provide global access to file ID generation
(skip) FileIdGenerator > Global Generator Functions > should generate batch of IDs efficiently
(skip) FileIdGenerator > Global Generator Functions > should provide ID information extraction
(skip) FileIdGenerator > Global Generator Functions > should handle invalid IDs gracefully
(skip) FileIdGenerator > Performance Benchmarks > should meet performance targets for ID generation
(skip) FileIdGenerator > Performance Benchmarks > should have minimal memory footprint
(skip) FileIdGenerator > Collision Resistance Tests > should handle multiple generators running concurrently
(skip) FileIdGenerator > Collision Resistance Tests > should maintain uniqueness under time pressure

src/filestorage/tests/FileValidator.test.ts:
(skip) FileValidator > Basic Validation > should validate a valid text file
(skip) FileValidator > Basic Validation > should reject file with empty filename
(skip) FileValidator > Basic Validation > should reject file with empty MIME type
(skip) FileValidator > Basic Validation > should reject file with invalid size
(skip) FileValidator > Basic Validation > should reject filename with dangerous characters
(skip) FileValidator > Basic Validation > should reject filename that is too long
(skip) FileValidator > File Size Validation > should accept file within size limit
(skip) FileValidator > File Size Validation > should reject file exceeding size limit
(skip) FileValidator > File Size Validation > should warn about size mismatch
(skip) FileValidator > MIME Type Validation > should accept allowed MIME types
(skip) FileValidator > MIME Type Validation > should reject blocked MIME types
(skip) FileValidator > MIME Type Validation > should reject disallowed MIME types
(skip) FileValidator > MIME Type Validation > should detect MIME type from extension
(skip) FileValidator > MIME Type Validation > should warn about MIME type mismatch
(skip) FileValidator > Content Validation > Image Files > should validate JPEG header
(skip) FileValidator > Content Validation > Image Files > should validate PNG header
(skip) FileValidator > Content Validation > Image Files > should warn about invalid image header
(skip) FileValidator > Content Validation > PDF Files > should validate PDF header
(skip) FileValidator > Content Validation > PDF Files > should reject invalid PDF header
(skip) FileValidator > Content Validation > JSON Files > should validate valid JSON
(skip) FileValidator > Content Validation > JSON Files > should reject invalid JSON
(skip) FileValidator > Content Validation > Text Files > should validate clean text content
(skip) FileValidator > Content Validation > Text Files > should warn about binary content in text files
(skip) FileValidator > Content Validation > Security Checks > should detect executable signatures
(skip) FileValidator > Content Validation > Security Checks > should detect script content in non-script files
(skip) FileValidator > Content Validation > Security Checks > should allow script content in script files
(skip) FileValidator > MIME Type Detection > should detect MIME type from content signatures
(skip) FileValidator > MIME Type Detection > should fall back to extension-based detection
(skip) FileValidator > MIME Type Detection > should use declared MIME type as last resort
(skip) FileValidator > Custom Validators > should run custom validators
(skip) FileValidator > Custom Validators > should handle custom validator errors
(skip) FileValidator > Custom Validators > should handle custom validator exceptions
(skip) FileValidator > Custom Validators > should manage custom validators
(skip) FileValidator > Configuration Management > should update configuration
(skip) FileValidator > Configuration Management > should emit configuration events
(skip) FileValidator > Checksum Calculation > should calculate file checksum
(skip) FileValidator > Event Emission > should emit validation events
(skip) FileValidator > Performance > should handle multiple files efficiently
(skip) FileValidator > Performance > should handle large files efficiently
(skip) FileValidator > Error Handling > should handle stream reading errors gracefully
(skip) FileValidator > Error Handling > should handle malformed file data

src/subscriptions/tests/ConnectionManager.test.ts:
(skip) ConnectionManager > WebSocket Connections > should create WebSocket connection successfully
(skip) ConnectionManager > WebSocket Connections > should handle WebSocket message events
(skip) ConnectionManager > WebSocket Connections > should handle WebSocket close events
(skip) ConnectionManager > WebSocket Connections > should send WebSocket messages
(skip) ConnectionManager > SSE Connections > should create SSE connection successfully
(skip) ConnectionManager > SSE Connections > should handle SSE close events
(skip) ConnectionManager > SSE Connections > should send SSE messages
(skip) ConnectionManager > Connection Management > should get connection by ID
(skip) ConnectionManager > Connection Management > should return undefined for non-existent connection
(skip) ConnectionManager > Connection Management > should get user connections
(skip) ConnectionManager > Connection Management > should get all connections
(skip) ConnectionManager > Connection Management > should close connection manually
(skip) ConnectionManager > Connection Management > should check if connection is alive
(skip) ConnectionManager > Connection Management > should update connection activity
(skip) ConnectionManager > Broadcasting > should broadcast message to multiple connections
(skip) ConnectionManager > Broadcasting > should broadcast to all user connections
(skip) ConnectionManager > Statistics > should track connection statistics
(skip) ConnectionManager > Statistics > should track peak connections
(skip) ConnectionManager > Cleanup and Maintenance > should cleanup expired connections
(skip) ConnectionManager > Cleanup and Maintenance > should shutdown gracefully
(skip) ConnectionManager > Error Handling > should handle WebSocket errors
(skip) ConnectionManager > Error Handling > should handle SSE errors
(skip) ConnectionManager > Error Handling > should handle sending message to non-existent connection
(skip) ConnectionManager > Error Handling > should handle sending message to closed WebSocket

src/subscriptions/tests/DataFilter.test.ts:
(skip) DataFilter > Scope Matching > should match collection-level changes
(skip) DataFilter > Scope Matching > should match document-level changes
(skip) DataFilter > Scope Matching > should match field-level changes
(skip) DataFilter > Scope Matching > should not match different collections
(skip) DataFilter > Scope Matching > should not match different documents
(skip) DataFilter > Scope Matching > should not match different fields
(skip) DataFilter > Field Filters > should apply equality field filter
(skip) DataFilter > Field Filters > should reject non-matching field filter
(skip) DataFilter > Field Filters > should apply numeric comparison filters
(skip) DataFilter > Field Filters > should apply array inclusion filters
(skip) DataFilter > Field Filters > should apply regex filters
(skip) DataFilter > Field Filters > should handle case insensitive filters
(skip) DataFilter > Field Filters > should handle nested field paths
(skip) DataFilter > User Filters > should apply user field filters
(skip) DataFilter > Custom Filters > should apply custom filters
(skip) DataFilter > Custom Filters > should reject data not passing custom filter
(skip) DataFilter > Multiple Filters > should apply multiple filters (AND logic)
(skip) DataFilter > Multiple Filters > should reject if any filter fails
(skip) DataFilter > Batch Filtering > should filter multiple changes
(skip) DataFilter > Cache Management > should provide cache statistics
(skip) DataFilter > Cache Management > should clear cache
(skip) DataFilter > Error Handling > should handle missing data gracefully
(skip) DataFilter > Error Handling > should handle filter errors gracefully

src/subscriptions/tests/SubscriptionEngine.test.ts:
(skip) SubscriptionEngine > Engine Lifecycle > should start and stop correctly
(skip) SubscriptionEngine > Engine Lifecycle > should not start if already running
(skip) SubscriptionEngine > Engine Lifecycle > should not stop if not running
(skip) SubscriptionEngine > Health and Metrics > should provide health status
(skip) SubscriptionEngine > Health and Metrics > should provide metrics
(skip) SubscriptionEngine > Health and Metrics > should show healthy status when running
(skip) SubscriptionEngine > Subscription Management > should create a subscription successfully
(skip) SubscriptionEngine > Subscription Management > should fail to create subscription when engine is not running
(skip) SubscriptionEngine > Subscription Management > should unsubscribe successfully
(skip) SubscriptionEngine > Subscription Management > should fail to unsubscribe non-existent subscription
(skip) SubscriptionEngine > Subscription Management > should get all subscriptions
(skip) SubscriptionEngine > Subscription Lifecycle > should pause and resume subscription
(skip) SubscriptionEngine > Subscription Lifecycle > should update subscription query
(skip) SubscriptionEngine > Connection Management > should handle connection close
(skip) SubscriptionEngine > Connection Management > should update connection activity
(skip) SubscriptionEngine > Statistics > should provide subscription statistics
(skip) SubscriptionEngine > Statistics > should track subscriptions by user
(skip) SubscriptionEngine > Statistics > should track subscriptions by collection
(skip) SubscriptionEngine > Performance > should create subscriptions quickly
(skip) SubscriptionEngine > Performance > should handle multiple subscriptions efficiently

src/subscriptions/tests/QueryParser.test.ts:
(skip) QueryParser > Basic Query Parsing > should parse a simple collection subscription
(skip) QueryParser > Basic Query Parsing > should parse a document subscription
(skip) QueryParser > Basic Query Parsing > should parse a field subscription
(skip) QueryParser > Basic Query Parsing > should parse explicit resource type
(skip) QueryParser > Options Parsing > should parse custom options
(skip) QueryParser > Options Parsing > should apply default options
(skip) QueryParser > Options Parsing > should validate batch size limits
(skip) QueryParser > Options Parsing > should validate throttle limits
(skip) QueryParser > Filter Parsing > should parse field filters
(skip) QueryParser > Filter Parsing > should parse user filters
(skip) QueryParser > Filter Parsing > should parse custom filters
(skip) QueryParser > Filter Parsing > should validate field filter operators
(skip) QueryParser > Filter Parsing > should validate regex patterns
(skip) QueryParser > Filter Parsing > should validate array operators
(skip) QueryParser > Filter Parsing > should reject custom filters when disabled
(skip) QueryParser > Filter Parsing > should enforce filter limits
(skip) QueryParser > Validation > should require collection for collection subscriptions
(skip) QueryParser > Validation > should require documentId for document subscriptions
(skip) QueryParser > Validation > should require fieldPath for field subscriptions
(skip) QueryParser > Validation > should reject invalid resource types
(skip) QueryParser > Validation > should reject duplicate field filters
(skip) QueryParser > Validation > should reject multiple custom filters
(skip) QueryParser > Validation > should reject null or undefined queries
(skip) QueryParser > Query ID Generation > should generate unique IDs for different queries
(skip) QueryParser > Query ID Generation > should generate deterministic IDs for equivalent queries
(skip) QueryParser > Static Utility Methods > should detect equivalent queries
(skip) QueryParser > Static Utility Methods > should detect different queries
(skip) QueryParser > Static Utility Methods > should calculate query complexity
(skip) QueryParser > Static Utility Methods > should optimize query filter order
(skip) QueryParser > Edge Cases > should handle empty filters array
(skip) QueryParser > Edge Cases > should handle case insensitive field filters
(skip) QueryParser > Edge Cases > should handle numeric field values
(skip) QueryParser > Edge Cases > should handle boolean field values

src/subscriptions/tests/NotificationManager.test.ts:
(skip) NotificationManager > Lifecycle Management > should start and stop correctly
(skip) NotificationManager > Lifecycle Management > should not start if already running
(skip) NotificationManager > Lifecycle Management > should not stop if not running
(skip) NotificationManager > Single Notifications > should send high priority notification immediately
(skip) NotificationManager > Single Notifications > should batch normal priority notifications
(skip) NotificationManager > Single Notifications > should handle notification when manager is stopped
(skip) NotificationManager > Batch Notifications > should send multiple notifications
(skip) NotificationManager > Batch Notifications > should flush batch when size limit reached
(skip) NotificationManager > Batch Notifications > should flush batch after timeout
(skip) NotificationManager > Broadcasting > should broadcast change to multiple subscriptions
(skip) NotificationManager > Broadcasting > should handle empty subscription list
(skip) NotificationManager > Connection Notifications > should send message to specific connection
(skip) NotificationManager > Connection Notifications > should batch connection messages
(skip) NotificationManager > Statistics and Monitoring > should provide notification statistics
(skip) NotificationManager > Statistics and Monitoring > should track pending notification count
(skip) NotificationManager > Statistics and Monitoring > should provide health status
(skip) NotificationManager > Batch Management > should flush all pending notifications on stop
(skip) NotificationManager > Batch Management > should manually flush all pending notifications
(skip) NotificationManager > Protocol Support > should handle WebSocket notifications
(skip) NotificationManager > Protocol Support > should handle SSE notifications
(skip) NotificationManager > Error Handling > should handle transport errors gracefully
(skip) NotificationManager > Error Handling > should track error statistics
(skip) NotificationManager > Priority Handling > should determine priority based on change type
(skip) NotificationManager > Priority Handling > should handle mixed priority notifications

src/subscriptions/tests/ClientSubscriptionManager.test.ts:
(skip) ClientSubscriptionManager > Initialization > should initialize successfully
(skip) ClientSubscriptionManager > Initialization > should provide sync status
(skip) ClientSubscriptionManager > Subset Synchronization > should sync subset of collections
(skip) ClientSubscriptionManager > Subset Synchronization > should handle sync errors gracefully
(skip) ClientSubscriptionManager > Local Data Management > should get local data for collection
(skip) ClientSubscriptionManager > Local Data Management > should get local data with query
(skip) ClientSubscriptionManager > Local Data Management > should update local data
(skip) ClientSubscriptionManager > Local Data Management > should handle delete operations
(skip) ClientSubscriptionManager > Offline Mode > should enable offline mode
(skip) ClientSubscriptionManager > Offline Mode > should disable offline mode
(skip) ClientSubscriptionManager > Offline Mode > should queue changes in offline mode
(skip) ClientSubscriptionManager > Conflict Resolution > should sync pending changes when going online
(skip) ClientSubscriptionManager > Conflict Resolution > should handle conflicts with different strategies
(skip) ClientSubscriptionManager > Cache Statistics > should provide cache statistics
(skip) ClientSubscriptionManager > Cache Statistics > should track cache size
(skip) ClientSubscriptionManager > Cache Management > should clear cache for specific collection
(skip) ClientSubscriptionManager > Cache Management > should clear all cache
(skip) ClientSubscriptionManager > Error Handling > should handle invalid collection names
(skip) ClientSubscriptionManager > Error Handling > should handle sync failures gracefully
(skip) ClientSubscriptionManager > Performance > should handle large datasets efficiently
(skip) ClientSubscriptionManager > Performance > should maintain performance with many collections
(skip) ClientSubscriptionManager > Memory Management > should cleanup resources on destroy

src/subscriptions/tests/CrossTabSynchronizer.test.ts:
(skip) CrossTabSynchronizer > Tab Registration > should register tab successfully
(skip) CrossTabSynchronizer > Tab Registration > should handle multiple tab registrations
(skip) CrossTabSynchronizer > Tab Registration > should unregister tab on destroy
(skip) CrossTabSynchronizer > Data Broadcasting > should broadcast data updates
(skip) CrossTabSynchronizer > Data Broadcasting > should handle different update types
(skip) CrossTabSynchronizer > Cache Management > should get cached data for collection
(skip) CrossTabSynchronizer > Cache Management > should get cached data for specific document
(skip) CrossTabSynchronizer > Error Handling > should handle BroadcastChannel errors gracefully
(skip) CrossTabSynchronizer > Error Handling > should handle message parsing errors
(skip) CrossTabSynchronizer > Browser Environment Detection > should handle non-browser environment gracefully
(skip) CrossTabSynchronizer > Performance > should handle multiple updates efficiently
(skip) CrossTabSynchronizer > Performance > should maintain performance with multiple tabs

src/subscriptions/tests/Integration.test.ts:
(skip) Subscription System Integration > End-to-End Subscription Flow > should handle complete subscription lifecycle
(skip) Subscription System Integration > End-to-End Subscription Flow > should handle multiple concurrent subscriptions
(skip) Subscription System Integration > End-to-End Subscription Flow > should handle authentication failures gracefully
(skip) Subscription System Integration > End-to-End Subscription Flow > should handle connection failures gracefully
(skip) Subscription System Integration > Performance and Scalability > should handle high-frequency data changes efficiently
(skip) Subscription System Integration > Performance and Scalability > should maintain performance with many subscriptions
(skip) Subscription System Integration > Error Recovery > should recover from notification failures
(skip) Subscription System Integration > Error Recovery > should handle component restart gracefully
(skip) Subscription System Integration > Health Monitoring > should provide comprehensive health status
(skip) Subscription System Integration > Health Monitoring > should track metrics accurately

src/performance/__tests__/FileOperationsProfiler.test.ts:
(skip) FileOperationsProfiler > Monitoring Lifecycle > should start monitoring successfully
(skip) FileOperationsProfiler > Monitoring Lifecycle > should stop monitoring and generate report
(skip) FileOperationsProfiler > Monitoring Lifecycle > should throw error when starting monitoring twice
(skip) FileOperationsProfiler > Monitoring Lifecycle > should throw error when stopping inactive monitoring
(skip) FileOperationsProfiler > File Upload Profiling > should profile file upload performance
(skip) FileOperationsProfiler > File Upload Profiling > should generate upload recommendations for poor performance
(skip) FileOperationsProfiler > File Upload Profiling > should record upload operations in history
(skip) FileOperationsProfiler > File Download Profiling > should profile file download performance
(skip) FileOperationsProfiler > File Download Profiling > should generate download recommendations for poor performance
(skip) FileOperationsProfiler > File Download Profiling > should record download operations in history
(skip) FileOperationsProfiler > Operation History Management > should maintain operation history
(skip) FileOperationsProfiler > Operation History Management > should clear all monitoring history
(skip) FileOperationsProfiler > Operation History Management > should return copy of operation history
(skip) FileOperationsProfiler > Performance Report Generation > should generate comprehensive performance report
(skip) FileOperationsProfiler > Performance Report Generation > should identify bottlenecks in performance report
(skip) FileOperationsProfiler > Configuration > should use default configuration when none provided
(skip) FileOperationsProfiler > Configuration > should merge provided configuration with defaults
(skip) FileOperationsProfiler > Error Handling > should handle zero-size file uploads gracefully
(skip) FileOperationsProfiler > Error Handling > should handle zero-size file downloads gracefully
(skip) FileOperationsProfiler > Error Handling > should handle monitoring without operations
(skip) FileOperationsProfiler > Performance Calculations > should calculate throughput correctly
(skip) FileOperationsProfiler > Performance Calculations > should calculate success rate correctly

src/performance/__tests__/RealtimeSubscriptionProfiler.test.ts:
(skip) RealtimeSubscriptionProfiler > Monitoring Lifecycle > should start monitoring successfully
(skip) RealtimeSubscriptionProfiler > Monitoring Lifecycle > should stop monitoring and generate report
(skip) RealtimeSubscriptionProfiler > Monitoring Lifecycle > should throw error when starting monitoring twice
(skip) RealtimeSubscriptionProfiler > Monitoring Lifecycle > should throw error when stopping inactive monitoring
(skip) RealtimeSubscriptionProfiler > Subscription Lifecycle Profiling > should profile subscription lifecycle
(skip) RealtimeSubscriptionProfiler > Subscription Lifecycle Profiling > should generate recommendations for slow subscription creation
(skip) RealtimeSubscriptionProfiler > Cross-Tab Synchronization Analysis > should analyze cross-tab synchronization
(skip) RealtimeSubscriptionProfiler > Cross-Tab Synchronization Analysis > should generate recommendations for slow sync
(skip) RealtimeSubscriptionProfiler > Metrics Collection > should collect subscription metrics during monitoring
(skip) RealtimeSubscriptionProfiler > Metrics Collection > should clear history
(skip) RealtimeSubscriptionProfiler > Performance Analysis Report > should generate comprehensive analysis report
(skip) RealtimeSubscriptionProfiler > Performance Analysis Report > should identify bottlenecks and provide recommendations
(skip) RealtimeSubscriptionProfiler > Error Handling > should handle invalid configurations gracefully
(skip) RealtimeSubscriptionProfiler > Error Handling > should handle zero tab count in cross-tab sync
(skip) RealtimeSubscriptionProfiler > Configuration Options > should respect custom sampling interval
(skip) RealtimeSubscriptionProfiler > Configuration Options > should handle detailed logging configuration

src/performance/__tests__/PerformanceProfiler.test.ts:
(skip) Phase 6: PerformanceProfiler > Profiling Session Management > should start profiling session successfully
(skip) Phase 6: PerformanceProfiler > Profiling Session Management > should throw error when starting duplicate session
(skip) Phase 6: PerformanceProfiler > Profiling Session Management > should start profiling with default components
(skip) Phase 6: PerformanceProfiler > Profiling Session Management > should stop profiling session and generate report
(skip) Phase 6: PerformanceProfiler > Profiling Session Management > should throw error when stopping non-existent session
(skip) Phase 6: PerformanceProfiler > Component Profiling > should profile authentication component
(skip) Phase 6: PerformanceProfiler > Component Profiling > should profile database component
(skip) Phase 6: PerformanceProfiler > Component Profiling > should profile realtime component
(skip) Phase 6: PerformanceProfiler > Component Profiling > should profile files component
(skip) Phase 6: PerformanceProfiler > Component Profiling > should profile system component
(skip) Phase 6: PerformanceProfiler > Bottleneck Analysis > should generate bottleneck report with summary
(skip) Phase 6: PerformanceProfiler > Bottleneck Analysis > should categorize bottlenecks by severity
(skip) Phase 6: PerformanceProfiler > Bottleneck Analysis > should sort bottlenecks by severity
(skip) Phase 6: PerformanceProfiler > Bottleneck Analysis > should generate optimization recommendations
(skip) Phase 6: PerformanceProfiler > CPU Hotspot Analysis > should analyze CPU hotspots
(skip) Phase 6: PerformanceProfiler > CPU Hotspot Analysis > should throw error for non-existent session in CPU analysis
(skip) Phase 6: PerformanceProfiler > Memory Usage Analysis > should analyze memory usage patterns
(skip) Phase 6: PerformanceProfiler > Memory Usage Analysis > should throw error for non-existent session in memory analysis
(skip) Phase 6: PerformanceProfiler > Database Query Profiling > should profile database queries
(skip) Phase 6: PerformanceProfiler > Database Query Profiling > should throw error for non-existent session in query profiling
(skip) Phase 6: PerformanceProfiler > Configuration & Edge Cases > should use custom configuration
(skip) Phase 6: PerformanceProfiler > Configuration & Edge Cases > should handle multiple concurrent sessions
(skip) Phase 6: PerformanceProfiler > Configuration & Edge Cases > should handle session status queries
(skip) Phase 6: PerformanceProfiler > Performance Validation > should complete profiling efficiently
(skip) Phase 6: PerformanceProfiler > Performance Validation > should handle rapid session creation and destruction

src/performance/__tests__/BottleneckAnalyzer.test.ts:
(skip) Phase 6: BottleneckAnalyzer > Optimization Plan Generation > should generate optimization plan from bottleneck report
(skip) Phase 6: BottleneckAnalyzer > Optimization Plan Generation > should prioritize optimizations by impact
(skip) Phase 6: BottleneckAnalyzer > Component-Specific Optimizations > should generate authentication optimizations
(skip) Phase 6: BottleneckAnalyzer > Component-Specific Optimizations > should generate database optimizations
(skip) Phase 6: BottleneckAnalyzer > Component-Specific Optimizations > should handle empty bottlenecks gracefully
(skip) Phase 6: BottleneckAnalyzer > Performance Target Validation > should validate performance metrics against targets
(skip) Phase 6: BottleneckAnalyzer > Performance Target Validation > should pass validation when all targets are met
(skip) Phase 6: BottleneckAnalyzer > Configuration & Edge Cases > should handle empty bottleneck report
(skip) Phase 6: BottleneckAnalyzer > Configuration & Edge Cases > should use default configuration when none provided

src/performance/__tests__/PerformanceScenarios.test.ts:
(skip) Phase 6: PerformanceScenarios > Authentication Scenarios > createAuthenticationScenario > should create authentication scenario with default config
(skip) Phase 6: PerformanceScenarios > Authentication Scenarios > createAuthenticationScenario > should create authentication scenario with custom config
(skip) Phase 6: PerformanceScenarios > Authentication Scenarios > createAuthenticationScenario > should include session duration in login operation
(skip) Phase 6: PerformanceScenarios > Authentication Scenarios > createAuthenticationStressScenario > should create high-load authentication scenario
(skip) Phase 6: PerformanceScenarios > Authentication Scenarios > createAuthenticationStressScenario > should allow custom config override
(skip) Phase 6: PerformanceScenarios > Database Scenarios > createDatabaseScenario > should create database scenario with default config
(skip) Phase 6: PerformanceScenarios > Database Scenarios > createDatabaseScenario > should use first collection from collections array
(skip) Phase 6: PerformanceScenarios > Database Scenarios > createDatabaseScenario > should use default collection when collections array is empty
(skip) Phase 6: PerformanceScenarios > Database Scenarios > createDatabaseScenario > should configure indexed vs non-indexed queries
(skip) Phase 6: PerformanceScenarios > Database Scenarios > createDatabaseScenario > should include aggregation pipeline
(skip) Phase 6: PerformanceScenarios > Database Scenarios > createDatabaseStressScenario > should create high-load database scenario
(skip) Phase 6: PerformanceScenarios > Real-time Scenarios > createRealtimeScenario > should create realtime scenario with default config
(skip) Phase 6: PerformanceScenarios > Real-time Scenarios > createRealtimeScenario > should use first channel from channels array
(skip) Phase 6: PerformanceScenarios > Real-time Scenarios > createRealtimeScenario > should use default channel when channels array is empty
(skip) Phase 6: PerformanceScenarios > Real-time Scenarios > createRealtimeScenario > should include cross-tab sync operation
(skip) Phase 6: PerformanceScenarios > Real-time Scenarios > createRealtimeStressScenario > should create high-concurrency realtime scenario
(skip) Phase 6: PerformanceScenarios > File Storage Scenarios > createFileStorageScenario > should create file storage scenario with default config
(skip) Phase 6: PerformanceScenarios > File Storage Scenarios > createFileStorageScenario > should configure file operations correctly
(skip) Phase 6: PerformanceScenarios > File Storage Scenarios > createFileStorageScenario > should include all file operations
(skip) Phase 6: PerformanceScenarios > Computed Attributes Scenarios > createComputedAttributesScenario > should create computed attributes scenario with default config
(skip) Phase 6: PerformanceScenarios > Computed Attributes Scenarios > createComputedAttributesScenario > should configure different computation types
(skip) Phase 6: PerformanceScenarios > Computed Attributes Scenarios > createComputedAttributesScenario > should configure cache hit ratio
(skip) Phase 6: PerformanceScenarios > Stored Functions Scenarios > createStoredFunctionsScenario > should create stored functions scenario with default config
(skip) Phase 6: PerformanceScenarios > Stored Functions Scenarios > createStoredFunctionsScenario > should configure different function types
(skip) Phase 6: PerformanceScenarios > Stored Functions Scenarios > createStoredFunctionsScenario > should include function parameters
(skip) Phase 6: PerformanceScenarios > Mixed Workload Scenarios > createMixedWorkloadScenario > should create comprehensive mixed workload scenario
(skip) Phase 6: PerformanceScenarios > Mixed Workload Scenarios > createMixedWorkloadScenario > should include all operation types
(skip) Phase 6: PerformanceScenarios > Mixed Workload Scenarios > createMixedWorkloadScenario > should distribute workload across features
(skip) Phase 6: PerformanceScenarios > Utility Methods > getAvailableScenarios > should return all available scenario types
(skip) Phase 6: PerformanceScenarios > Utility Methods > createScenarioByName > should create scenarios by name
(skip) Phase 6: PerformanceScenarios > Utility Methods > createScenarioByName > should pass config to scenario creation
(skip) Phase 6: PerformanceScenarios > Utility Methods > createScenarioByName > should throw error for unknown scenario type
(skip) Phase 6: PerformanceScenarios > Utility Methods > createScenarioByName > should create all available scenario types
(skip) Phase 6: PerformanceScenarios > Data Generation > should generate different record sizes
(skip) Phase 6: PerformanceScenarios > Data Generation > should generate different message sizes
(skip) Phase 6: PerformanceScenarios > Performance Validation > should create scenarios efficiently
(skip) Phase 6: PerformanceScenarios > Performance Validation > should create scenarios by name efficiently

src/performance/__tests__/NetworkProfiler.test.ts:
(skip) NetworkProfiler > Monitoring Lifecycle > should start monitoring successfully
(skip) NetworkProfiler > Monitoring Lifecycle > should stop monitoring and generate report
(skip) NetworkProfiler > Monitoring Lifecycle > should throw error when starting monitoring twice
(skip) NetworkProfiler > Monitoring Lifecycle > should throw error when stopping inactive monitoring
(skip) NetworkProfiler > Latency Measurement > should measure latency for multiple endpoints
(skip) NetworkProfiler > Latency Measurement > should store latency history
(skip) NetworkProfiler > Bandwidth Measurement > should measure bandwidth for different protocols
(skip) NetworkProfiler > Bandwidth Measurement > should store bandwidth history
(skip) NetworkProfiler > WebSocket Analysis > should analyze WebSocket performance
(skip) NetworkProfiler > Network Optimizations > should generate network optimizations based on analysis report
(skip) NetworkProfiler > History Management > should clear all monitoring history

src/performance/__tests__/PredictivePerformanceAnalyzer.test.ts:
(skip) PredictivePerformanceAnalyzer > Data Management > should add performance data successfully
(skip) PredictivePerformanceAnalyzer > Data Management > should limit historical data to 90 days
(skip) PredictivePerformanceAnalyzer > Data Management > should clear historical data successfully
(skip) PredictivePerformanceAnalyzer > Data Management > should provide data statistics
(skip) PredictivePerformanceAnalyzer > Synthetic Data Generation > should generate synthetic data for specified days
(skip) PredictivePerformanceAnalyzer > Synthetic Data Generation > should generate realistic synthetic data with patterns
(skip) PredictivePerformanceAnalyzer > Synthetic Data Generation > should include contextual factors in synthetic data
(skip) PredictivePerformanceAnalyzer > Predictive Analysis > should perform full predictive analysis
(skip) PredictivePerformanceAnalyzer > Predictive Analysis > should throw error with insufficient data
(skip) PredictivePerformanceAnalyzer > Predictive Analysis > should respect analysis configuration flags
(skip) PredictivePerformanceAnalyzer > Trend Analysis > should analyze trends correctly
(skip) PredictivePerformanceAnalyzer > Trend Analysis > should sort trends by strength
(skip) PredictivePerformanceAnalyzer > Trend Analysis > should include confidence intervals
(skip) PredictivePerformanceAnalyzer > Bottleneck Prediction > should predict bottlenecks correctly
(skip) PredictivePerformanceAnalyzer > Bottleneck Prediction > should sort predictions by lead time
(skip) PredictivePerformanceAnalyzer > Bottleneck Prediction > should include impact radius
(skip) PredictivePerformanceAnalyzer > Seasonal Pattern Analysis > should detect seasonal patterns
(skip) PredictivePerformanceAnalyzer > Seasonal Pattern Analysis > should identify peak and low times
(skip) PredictivePerformanceAnalyzer > Seasonal Pattern Analysis > should sort patterns by reliability
(skip) PredictivePerformanceAnalyzer > Anomaly Detection > should detect anomalies
(skip) PredictivePerformanceAnalyzer > Anomaly Detection > should sort anomalies by deviation score
(skip) PredictivePerformanceAnalyzer > Anomaly Detection > should classify anomaly types correctly
(skip) PredictivePerformanceAnalyzer > Risk Assessment > should calculate risk assessment correctly
(skip) PredictivePerformanceAnalyzer > Risk Assessment > should identify critical components
(skip) PredictivePerformanceAnalyzer > Recommendations Generation > should generate comprehensive recommendations
(skip) PredictivePerformanceAnalyzer > Recommendations Generation > should provide specific recommendations for detected issues
(skip) PredictivePerformanceAnalyzer > Model Performance Evaluation > should evaluate model performance
(skip) PredictivePerformanceAnalyzer > Model Performance Evaluation > should calculate data quality correctly
(skip) PredictivePerformanceAnalyzer > Configuration Options > should respect prediction horizon
(skip) PredictivePerformanceAnalyzer > Configuration Options > should respect confidence threshold
(skip) PredictivePerformanceAnalyzer > Configuration Options > should handle detailed logging
(skip) PredictivePerformanceAnalyzer > Error Handling > should handle empty data gracefully
(skip) PredictivePerformanceAnalyzer > Error Handling > should handle invalid metric values
(skip) PredictivePerformanceAnalyzer > Error Handling > should handle constant values in trend analysis
(skip) PredictivePerformanceAnalyzer > Performance Validation > should complete analysis efficiently with large datasets
(skip) PredictivePerformanceAnalyzer > Performance Validation > should handle concurrent analysis requests
(skip) PredictivePerformanceAnalyzer > Performance Validation > should maintain memory efficiency

src/performance/__tests__/RealTimeOptimizer.test.ts:
(skip) RealTimeOptimizer > Lifecycle Management > should start real-time optimization successfully
(skip) RealTimeOptimizer > Lifecycle Management > should throw error when starting already running optimizer
(skip) RealTimeOptimizer > Lifecycle Management > should stop real-time optimization successfully
(skip) RealTimeOptimizer > Lifecycle Management > should throw error when stopping non-running optimizer
(skip) RealTimeOptimizer > Dynamic Optimization > should apply dynamic optimization based on metrics
(skip) RealTimeOptimizer > Dynamic Optimization > should not apply optimization during cooldown period
(skip) RealTimeOptimizer > Dynamic Optimization > should generate CPU optimization actions
(skip) RealTimeOptimizer > Dynamic Optimization > should generate memory optimization actions
(skip) RealTimeOptimizer > Dynamic Optimization > should generate response time optimization actions
(skip) RealTimeOptimizer > Dynamic Optimization > should generate throughput optimization actions
(skip) RealTimeOptimizer > Dynamic Optimization > should throw error when not running
(skip) RealTimeOptimizer > Emergency Response > should detect CPU spike emergency
(skip) RealTimeOptimizer > Emergency Response > should detect memory leak emergency
(skip) RealTimeOptimizer > Emergency Response > should detect error storm emergency
(skip) RealTimeOptimizer > Emergency Response > should detect latency spike emergency
(skip) RealTimeOptimizer > Emergency Response > should detect throughput drop emergency
(skip) RealTimeOptimizer > Emergency Response > should handle emergency response execution
(skip) RealTimeOptimizer > Emergency Response > should not handle same emergency type if already active
(skip) RealTimeOptimizer > Configuration Management > should adjust component configuration successfully
(skip) RealTimeOptimizer > Configuration Management > should reject invalid configuration
(skip) RealTimeOptimizer > Configuration Management > should throw error when adjusting configuration while not running
(skip) RealTimeOptimizer > Threshold Management > should update performance thresholds
(skip) RealTimeOptimizer > Threshold Management > should get active thresholds
(skip) RealTimeOptimizer > Threshold Management > should use updated thresholds for optimization decisions
(skip) RealTimeOptimizer > Performance Monitoring > should maintain performance history
(skip) RealTimeOptimizer > Performance Monitoring > should limit history size
(skip) RealTimeOptimizer > Performance Monitoring > should calculate recent average throughput
(skip) RealTimeOptimizer > Error Handling > should handle monitoring cycle errors gracefully
(skip) RealTimeOptimizer > Error Handling > should handle action execution failures
(skip) RealTimeOptimizer > Error Handling > should handle invalid metrics gracefully
(skip) RealTimeOptimizer > Integration Scenarios > should handle multiple simultaneous issues
(skip) RealTimeOptimizer > Integration Scenarios > should prioritize emergency responses over regular optimizations
(skip) RealTimeOptimizer > Integration Scenarios > should work with custom emergency thresholds

src/performance/__tests__/AutomatedOptimizationEngine.test.ts:
(skip) AutomatedOptimizationEngine > Engine Lifecycle > should start engine successfully
(skip) AutomatedOptimizationEngine > Engine Lifecycle > should throw error when starting already running engine
(skip) AutomatedOptimizationEngine > Engine Lifecycle > should stop engine successfully
(skip) AutomatedOptimizationEngine > Engine Lifecycle > should throw error when stopping non-running engine
(skip) AutomatedOptimizationEngine > Engine Lifecycle > should track engine uptime correctly
(skip) AutomatedOptimizationEngine > Optimization Execution > should execute optimization recommendations
(skip) AutomatedOptimizationEngine > Optimization Execution > should prioritize critical optimizations first
(skip) AutomatedOptimizationEngine > Optimization Execution > should schedule optimizations when at capacity
(skip) AutomatedOptimizationEngine > Optimization Execution > should handle optimization failures gracefully
(skip) AutomatedOptimizationEngine > Optimization Execution > should track optimization metrics
(skip) AutomatedOptimizationEngine > Scheduling Management > should schedule optimization successfully
(skip) AutomatedOptimizationEngine > Scheduling Management > should cancel scheduled optimization
(skip) AutomatedOptimizationEngine > Scheduling Management > should return false when cancelling non-existent optimization
(skip) AutomatedOptimizationEngine > Scheduling Management > should update next scheduled time correctly
(skip) AutomatedOptimizationEngine > Validation and Rollback > should validate optimization successfully
(skip) AutomatedOptimizationEngine > Validation and Rollback > should throw error when validating non-existent optimization
(skip) AutomatedOptimizationEngine > Validation and Rollback > should rollback optimization successfully
(skip) AutomatedOptimizationEngine > Validation and Rollback > should handle rollback failures gracefully
(skip) AutomatedOptimizationEngine > Status and Reporting > should provide accurate engine status
(skip) AutomatedOptimizationEngine > Status and Reporting > should calculate current load correctly
(skip) AutomatedOptimizationEngine > Status and Reporting > should generate optimization report
(skip) AutomatedOptimizationEngine > Status and Reporting > should maintain optimization history
(skip) AutomatedOptimizationEngine > Status and Reporting > should sort history by most recent first
(skip) AutomatedOptimizationEngine > Error Handling > should throw error when executing optimizations without starting engine
(skip) AutomatedOptimizationEngine > Error Handling > should throw error when scheduling without starting engine
(skip) AutomatedOptimizationEngine > Error Handling > should handle invalid optimization data gracefully
(skip) AutomatedOptimizationEngine > Performance Metrics > should calculate performance impact correctly
(skip) AutomatedOptimizationEngine > Performance Metrics > should track execution logs
(skip) AutomatedOptimizationEngine > Performance Metrics > should measure optimization duration

src/performance/__tests__/AutomatedOptimizationIntegration.test.ts:
(skip) Automated Optimization Integration > Complete Optimization Workflow > should execute complete optimization workflow successfully
(skip) Automated Optimization Integration > Complete Optimization Workflow > should handle optimization rollback workflow
(skip) Automated Optimization Integration > Real-Time Optimization Integration > should integrate real-time optimization with validation
(skip) Automated Optimization Integration > Real-Time Optimization Integration > should handle emergency response with validation
(skip) Automated Optimization Integration > Real-Time Optimization Integration > should update thresholds and apply new optimization logic
(skip) Automated Optimization Integration > Engine and Real-Time Optimizer Coordination > should coordinate scheduled and real-time optimizations
(skip) Automated Optimization Integration > Engine and Real-Time Optimizer Coordination > should handle resource conflicts between systems
(skip) Automated Optimization Integration > Error Handling and Recovery > should handle validation failures gracefully
(pass) Automated Optimization Integration > Error Handling and Recovery > should handle system failures and recovery [247.23ms]
(skip) Automated Optimization Integration > Error Handling and Recovery > should maintain audit trail during failures
(skip) Automated Optimization Integration > Performance and Scalability > should handle multiple concurrent optimizations
(skip) Automated Optimization Integration > Performance and Scalability > should maintain performance under load

src/performance/__tests__/MetricsCollector.test.ts:
(skip) Phase 6: MetricsCollector > Core Collection Methods > startCollection > should start metrics collection successfully
(skip) Phase 6: MetricsCollector > Core Collection Methods > startCollection > should throw error if collection already started
(skip) Phase 6: MetricsCollector > Core Collection Methods > startCollection > should use default interval if not specified
(skip) Phase 6: MetricsCollector > Core Collection Methods > startCollection > should use custom interval when specified
(skip) Phase 6: MetricsCollector > Core Collection Methods > stopCollection > should stop metrics collection successfully
(skip) Phase 6: MetricsCollector > Core Collection Methods > stopCollection > should handle stopping when not collecting
(skip) Phase 6: MetricsCollector > Core Collection Methods > stopCollection > should allow restarting after stopping
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should collect metrics snapshot successfully
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should collect system metrics correctly
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should collect application metrics correctly
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should collect network metrics correctly
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should collect disk metrics correctly
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should calculate network rates on subsequent calls
(skip) Phase 6: MetricsCollector > Core Collection Methods > collectSnapshot > should calculate disk rates on subsequent calls
(skip) Phase 6: MetricsCollector > Historical Data Management > getHistoricalMetrics > should return empty array when no history
(skip) Phase 6: MetricsCollector > Historical Data Management > getHistoricalMetrics > should return metrics within time range
(skip) Phase 6: MetricsCollector > Historical Data Management > getHistoricalMetrics > should filter metrics by time range correctly
(skip) Phase 6: MetricsCollector > Historical Data Management > clearHistory > should clear all historical metrics
(skip) Phase 6: MetricsCollector > Alerting System > setAlertThreshold > should set alert threshold successfully
(skip) Phase 6: MetricsCollector > Alerting System > setAlertThreshold > should handle multiple thresholds for different metrics
(skip) Phase 6: MetricsCollector > Alerting System > getActiveAlerts > should return empty array when no alerts
(skip) Phase 6: MetricsCollector > Alerting System > getActiveAlerts > should return active alerts when thresholds exceeded
(skip) Phase 6: MetricsCollector > Export Functionality > exportMetrics > should export metrics in JSON format
(skip) Phase 6: MetricsCollector > Export Functionality > exportMetrics > should export metrics in CSV format
(skip) Phase 6: MetricsCollector > Export Functionality > exportMetrics > should export metrics with time range filter
(skip) Phase 6: MetricsCollector > Export Functionality > exportMetrics > should handle empty metrics gracefully
(skip) Phase 6: MetricsCollector > Configuration & Edge Cases > Custom Configuration > should use custom configuration
(skip) Phase 6: MetricsCollector > Configuration & Edge Cases > Custom Configuration > should handle disabled metrics collection
(skip) Phase 6: MetricsCollector > Configuration & Edge Cases > Error Handling > should handle collection errors gracefully
(skip) Phase 6: MetricsCollector > Configuration & Edge Cases > Error Handling > should handle invalid metric names in alerts
(skip) Phase 6: MetricsCollector > Configuration & Edge Cases > Performance Validation > should collect metrics efficiently
(skip) Phase 6: MetricsCollector > Configuration & Edge Cases > Performance Validation > should handle rapid collection intervals

src/performance/__tests__/LoadTestManager.test.ts:
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should create test scenario correctly
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should validate scenario has required fields
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should validate virtual users count
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should validate test duration
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should validate operations exist
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should validate operation weights sum to 100
(skip) Phase 6: LoadTestManager > Test Scenario Management > createTestScenario > should handle scenario creation errors gracefully
(skip) Phase 6: LoadTestManager > Test Scenario Management > runTestScenario > should run test scenario successfully
(skip) Phase 6: LoadTestManager > Test Scenario Management > runTestScenario > should handle non-existent scenario
(skip) Phase 6: LoadTestManager > Test Scenario Management > runTestScenario > should generate unique test IDs
(skip) Phase 6: LoadTestManager > Test Scenario Management > runTestScenario > should execute all test phases
(skip) Phase 6: LoadTestManager > Test Scenario Management > runTestScenario > should handle test execution errors
(skip) Phase 6: LoadTestManager > Test Scenario Management > stopTestScenario > should stop running test scenario
(skip) Phase 6: LoadTestManager > Test Scenario Management > stopTestScenario > should handle stopping non-existent test
(skip) Phase 6: LoadTestManager > Monitoring & Status > monitorPerformance > should collect performance metrics for active test
(skip) Phase 6: LoadTestManager > Monitoring & Status > monitorPerformance > should handle monitoring non-existent test
(skip) Phase 6: LoadTestManager > Monitoring & Status > getTestStatus > should return test status for active test
(skip) Phase 6: LoadTestManager > Monitoring & Status > getTestStatus > should calculate progress correctly
(skip) Phase 6: LoadTestManager > Results & Reporting > getTestResults > should return test results after completion
(skip) Phase 6: LoadTestManager > Results & Reporting > getTestResults > should handle non-existent test results
(skip) Phase 6: LoadTestManager > Results & Reporting > generateReport > should generate comprehensive test report
(skip) Phase 6: LoadTestManager > Results & Reporting > generateReport > should include performance recommendations
(skip) Phase 6: LoadTestManager > Results & Reporting > generateReport > should handle report generation for non-existent test
(skip) Phase 6: LoadTestManager > Performance Metrics > should collect accurate timing metrics using performance.now()
(skip) Phase 6: LoadTestManager > Performance Metrics > should calculate percentiles correctly
(skip) Phase 6: LoadTestManager > Performance Metrics > should track throughput metrics
(skip) Phase 6: LoadTestManager > Performance Metrics > should track error metrics
(skip) Phase 6: LoadTestManager > Performance Metrics > should track system metrics
(skip) Phase 6: LoadTestManager > Success Criteria Evaluation > should evaluate test success based on criteria
(skip) Phase 6: LoadTestManager > Success Criteria Evaluation > should fail test when response time exceeds threshold
(skip) Phase 6: LoadTestManager > Success Criteria Evaluation > should provide detailed failure reasons
(skip) Phase 6: LoadTestManager > Edge Cases & Error Handling > should handle empty operation results gracefully
(skip) Phase 6: LoadTestManager > Edge Cases & Error Handling > should handle concurrent test execution
(skip) Phase 6: LoadTestManager > Edge Cases & Error Handling > should cleanup resources properly

src/performance/__tests__/OptimizationValidator.test.ts:

src/performance/__tests__/TestScenarioBuilder.test.ts:
(skip) Phase 6: TestScenarioBuilder > Fluent API > createScenario > should create scenario builder instance
(skip) Phase 6: TestScenarioBuilder > Fluent API > createScenario > should set scenario name correctly
(skip) Phase 6: TestScenarioBuilder > Fluent API > Fluent Builder Chain > should build complete scenario with fluent API
(skip) Phase 6: TestScenarioBuilder > Fluent API > Fluent Builder Chain > should validate operation weights sum to 100
(skip) Phase 6: TestScenarioBuilder > Fluent API > Fluent Builder Chain > should validate required fields
(skip) Phase 6: TestScenarioBuilder > Fluent API > Operation Builders > should add auth operations correctly
(skip) Phase 6: TestScenarioBuilder > Fluent API > Operation Builders > should add query operations correctly
(skip) Phase 6: TestScenarioBuilder > Fluent API > Operation Builders > should add realtime operations correctly
(skip) Phase 6: TestScenarioBuilder > Fluent API > Operation Builders > should handle mixed operations
(skip) Phase 6: TestScenarioBuilder > Pre-built Scenario Templates > getAuthenticationScenario > should create authentication scenario correctly
(skip) Phase 6: TestScenarioBuilder > Pre-built Scenario Templates > getAuthenticationScenario > should calculate ramp-up time based on user count
(skip) Phase 6: TestScenarioBuilder > Pre-built Scenario Templates > getDatabaseScenario > should create database scenario correctly
(skip) Phase 6: TestScenarioBuilder > Pre-built Scenario Templates > getDatabaseScenario > should handle empty collections array
(skip) Phase 6: TestScenarioBuilder > Pre-built Scenario Templates > getRealtimeScenario > should create realtime scenario correctly
(skip) Phase 6: TestScenarioBuilder > Pre-built Scenario Templates > getRealtimeScenario > should handle empty subscription types
(skip) Phase 6: TestScenarioBuilder > Template Management > getAvailableTemplates > should return built-in templates
(skip) Phase 6: TestScenarioBuilder > Template Management > getAvailableTemplates > should return template with correct structure
(skip) Phase 6: TestScenarioBuilder > Template Management > getTemplate > should return specific template
(skip) Phase 6: TestScenarioBuilder > Template Management > getTemplate > should return undefined for non-existent template
(skip) Phase 6: TestScenarioBuilder > Template Management > addCustomTemplate > should add custom template
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should validate correct scenario
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should detect missing required fields
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should detect invalid virtual users
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should detect invalid test duration
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should detect missing operations
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should detect incorrect operation weights
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should generate warnings for high resource usage
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should generate warnings for strict success criteria
(skip) Phase 6: TestScenarioBuilder > Scenario Validation > validateScenario > should generate optimization suggestions
(skip) Phase 6: TestScenarioBuilder > Optimization Suggestions > getOptimizationSuggestions > should suggest performance optimizations
(skip) Phase 6: TestScenarioBuilder > Optimization Suggestions > getOptimizationSuggestions > should suggest reliability optimizations
(skip) Phase 6: TestScenarioBuilder > Optimization Suggestions > getOptimizationSuggestions > should suggest resource usage optimizations
(skip) Phase 6: TestScenarioBuilder > Optimization Suggestions > getOptimizationSuggestions > should include impact levels and recommendations
(skip) Phase 6: TestScenarioBuilder > Import/Export Functionality > exportScenario > should export scenario in JSON format
(skip) Phase 6: TestScenarioBuilder > Import/Export Functionality > exportScenario > should export scenario in YAML format
(skip) Phase 6: TestScenarioBuilder > Import/Export Functionality > exportScenario > should default to JSON format
(skip) Phase 6: TestScenarioBuilder > Import/Export Functionality > importScenario > should import scenario from JSON
(skip) Phase 6: TestScenarioBuilder > Import/Export Functionality > importScenario > should handle invalid JSON gracefully
(skip) Phase 6: TestScenarioBuilder > Import/Export Functionality > importScenario > should throw error for YAML import (not implemented)
(skip) Phase 6: TestScenarioBuilder > Performance Validation > should validate scenarios efficiently
(skip) Phase 6: TestScenarioBuilder > Performance Validation > should generate optimizations efficiently

src/performance/__tests__/CrossComponentCorrelationAnalyzer.test.ts:
(skip) CrossComponentCorrelationAnalyzer > Monitoring Lifecycle > should start monitoring successfully
(skip) CrossComponentCorrelationAnalyzer > Monitoring Lifecycle > should stop monitoring and generate report
(skip) CrossComponentCorrelationAnalyzer > Monitoring Lifecycle > should throw error when starting monitoring twice
(skip) CrossComponentCorrelationAnalyzer > Monitoring Lifecycle > should throw error when stopping inactive monitoring
(skip) CrossComponentCorrelationAnalyzer > Component Metrics Management > should add component metrics successfully
(skip) CrossComponentCorrelationAnalyzer > Component Metrics Management > should limit history size based on analysis window
(skip) CrossComponentCorrelationAnalyzer > Component Metrics Management > should clear history successfully
(skip) CrossComponentCorrelationAnalyzer > Correlation Analysis > should analyze correlations between components
(skip) CrossComponentCorrelationAnalyzer > Correlation Analysis > should filter correlations by threshold
(skip) CrossComponentCorrelationAnalyzer > Correlation Analysis > should analyze specific components when provided
(skip) CrossComponentCorrelationAnalyzer > Cascade Effects Analysis > should detect cascade effects
(skip) CrossComponentCorrelationAnalyzer > Cascade Effects Analysis > should sort cascade effects by impact magnitude
(skip) CrossComponentCorrelationAnalyzer > Cascade Effects Analysis > should return empty array when cascade analysis is disabled
(skip) CrossComponentCorrelationAnalyzer > Critical Path Analysis > should analyze critical paths
(skip) CrossComponentCorrelationAnalyzer > Critical Path Analysis > should identify bottleneck components correctly
(skip) CrossComponentCorrelationAnalyzer > Critical Path Analysis > should sort critical paths by total latency
(skip) CrossComponentCorrelationAnalyzer > Critical Path Analysis > should return empty array when critical path analysis is disabled
(skip) CrossComponentCorrelationAnalyzer > Resource Dependency Analysis > should analyze resource dependencies
(skip) CrossComponentCorrelationAnalyzer > Resource Dependency Analysis > should identify high resource usage components
(skip) CrossComponentCorrelationAnalyzer > Resource Dependency Analysis > should sort dependencies by contention level
(skip) CrossComponentCorrelationAnalyzer > Resource Dependency Analysis > should return empty array when resource dependency analysis is disabled
(skip) CrossComponentCorrelationAnalyzer > Optimization Recommendations > should generate correlation optimizations
(skip) CrossComponentCorrelationAnalyzer > Optimization Recommendations > should provide different recommendations based on correlation patterns
(skip) CrossComponentCorrelationAnalyzer > Optimization Recommendations > should provide architectural recommendations for many correlations
(skip) CrossComponentCorrelationAnalyzer > Configuration Options > should respect custom correlation threshold
(skip) CrossComponentCorrelationAnalyzer > Configuration Options > should handle detailed logging configuration
(skip) CrossComponentCorrelationAnalyzer > Error Handling > should handle insufficient data gracefully
(skip) CrossComponentCorrelationAnalyzer > Error Handling > should handle invalid correlation calculations
(skip) CrossComponentCorrelationAnalyzer > Error Handling > should handle empty component lists
(skip) CrossComponentCorrelationAnalyzer > Performance Validation > should complete analysis efficiently
(skip) CrossComponentCorrelationAnalyzer > Performance Validation > should handle concurrent analysis requests

src/performance/__tests__/PerformanceIntegrator.test.ts:
(skip) Phase 6: PerformanceIntegrator > Initialization > should initialize with default config
(skip) Phase 6: PerformanceIntegrator > Initialization > should initialize with custom config
(skip) Phase 6: PerformanceIntegrator > Initialization > should initialize successfully
(skip) Phase 6: PerformanceIntegrator > Baseline Measurement > should measure baseline metrics successfully
(skip) Phase 6: PerformanceIntegrator > Baseline Measurement > should store baseline metrics
(skip) Phase 6: PerformanceIntegrator > Performance Test Suite > should run performance test suite successfully
(skip) Phase 6: PerformanceIntegrator > Performance Test Suite > should run specific scenarios
(skip) Phase 6: PerformanceIntegrator > Performance Comparison > should compare performance with baseline
(skip) Phase 6: PerformanceIntegrator > Performance Comparison > should throw error when no baseline available
(skip) Phase 6: PerformanceIntegrator > Scenario Validation > should validate all test scenarios
(skip) Phase 6: PerformanceIntegrator > Resource Management > should cleanup resources properly

src/performance/__tests__/ComputedAttributesProfiler.test.ts:
(skip) ComputedAttributesProfiler > Monitoring Lifecycle > should start monitoring successfully
(skip) ComputedAttributesProfiler > Monitoring Lifecycle > should stop monitoring and generate report
(skip) ComputedAttributesProfiler > Monitoring Lifecycle > should throw error when starting monitoring twice
(skip) ComputedAttributesProfiler > Monitoring Lifecycle > should throw error when stopping inactive monitoring
(skip) ComputedAttributesProfiler > Computation Profiling > should profile computation performance
(skip) ComputedAttributesProfiler > Computation Profiling > should generate recommendations for slow computation
(skip) ComputedAttributesProfiler > Computation Profiling > should handle computation without dependencies
(skip) ComputedAttributesProfiler > Cache Efficiency Analysis > should analyze cache efficiency
(skip) ComputedAttributesProfiler > Cache Efficiency Analysis > should generate cache optimization recommendations
(skip) ComputedAttributesProfiler > Metrics Collection > should collect computation metrics during monitoring
(skip) ComputedAttributesProfiler > Metrics Collection > should clear history
(skip) ComputedAttributesProfiler > Performance Analysis Report > should generate comprehensive analysis report
(skip) ComputedAttributesProfiler > Performance Analysis Report > should identify bottlenecks and provide recommendations
(skip) ComputedAttributesProfiler > Error Handling > should handle invalid computation configurations gracefully
(skip) ComputedAttributesProfiler > Error Handling > should handle zero cache size
(skip) ComputedAttributesProfiler > Error Handling > should handle zero operations
(skip) ComputedAttributesProfiler > Configuration Options > should respect custom sampling interval
(skip) ComputedAttributesProfiler > Configuration Options > should handle detailed logging configuration
(skip) ComputedAttributesProfiler > Complex Scenarios > should handle multiple computation types
(skip) ComputedAttributesProfiler > Complex Scenarios > should handle cache analysis with different sizes

src/query/__tests__/bitwise.test.ts:
(skip) Bitwise Operators > BitsAllSetOperator ($bitsAllSet) > should return true if all specified bits (mask) are 1
(skip) Bitwise Operators > BitsAllSetOperator ($bitsAllSet) > should return false if any specified bit (mask) is 0
(skip) Bitwise Operators > BitsAllSetOperator ($bitsAllSet) > should return true if all specified bits (positions) are 1
(skip) Bitwise Operators > BitsAllSetOperator ($bitsAllSet) > should return false if any specified bit (position) is 0
(skip) Bitwise Operators > BitsAllSetOperator ($bitsAllSet) > should return false for non-integer or non-numeric values
(skip) Bitwise Operators > BitsAllSetOperator ($bitsAllSet) > should throw error for invalid constructor arguments
(skip) Bitwise Operators > BitsAnySetOperator ($bitsAnySet) > should return true if any specified bit (mask) is 1
(skip) Bitwise Operators > BitsAnySetOperator ($bitsAnySet) > should return false if all specified bits (mask) are 0
(skip) Bitwise Operators > BitsAnySetOperator ($bitsAnySet) > should return true if any specified bit (position) is 1
(skip) Bitwise Operators > BitsAnySetOperator ($bitsAnySet) > should return false if all specified bits (position) are 0
(skip) Bitwise Operators > BitsAnySetOperator ($bitsAnySet) > should return false for non-integer or non-numeric values
(skip) Bitwise Operators > BitsAnySetOperator ($bitsAnySet) > should throw error for invalid constructor arguments
(skip) Bitwise Operators > BitsAllClearOperator ($bitsAllClear) > should return true if all specified bits (mask) are 0
(skip) Bitwise Operators > BitsAllClearOperator ($bitsAllClear) > should return false if any specified bit (mask) is 1
(skip) Bitwise Operators > BitsAllClearOperator ($bitsAllClear) > should return true if all specified bits (positions) are 0
(skip) Bitwise Operators > BitsAllClearOperator ($bitsAllClear) > should return false if any specified bit (position) is 1
(skip) Bitwise Operators > BitsAllClearOperator ($bitsAllClear) > should return false for non-integer or non-numeric values
(skip) Bitwise Operators > BitsAllClearOperator ($bitsAllClear) > should throw error for invalid constructor arguments
(skip) Bitwise Operators > BitsAnyClearOperator ($bitsAnyClear) > should return true if any specified bit (mask) is 0
(skip) Bitwise Operators > BitsAnyClearOperator ($bitsAnyClear) > should return false if all specified bits (mask) are 1
(skip) Bitwise Operators > BitsAnyClearOperator ($bitsAnyClear) > should return true if any specified bit (position) is 0
(skip) Bitwise Operators > BitsAnyClearOperator ($bitsAnyClear) > should return false if all specified bits (position) are 1
(skip) Bitwise Operators > BitsAnyClearOperator ($bitsAnyClear) > should return false for non-integer or non-numeric values
(skip) Bitwise Operators > BitsAnyClearOperator ($bitsAnyClear) > should throw error for invalid constructor arguments

src/query/__tests__/logical.test.ts:
(skip) Logical Operators > AndOperator ($and) > should evaluate to true if all sub-conditions evaluate to true
(skip) Logical Operators > AndOperator ($and) > should evaluate to false if any sub-condition evaluates to false
(skip) Logical Operators > AndOperator ($and) > should evaluate to true for an empty array of conditions (vacuously true)
(skip) Logical Operators > AndOperator ($and) > should pass context to sub-conditions if needed
(skip) Logical Operators > AndOperator ($and) > should throw error if constructor value is not an array
(skip) Logical Operators > AndOperator ($and) > should throw error if array elements are not objects (potential QueryOperators)
(skip) Logical Operators > OrOperator ($or) > should evaluate to true if any sub-condition evaluates to true
(skip) Logical Operators > OrOperator ($or) > should evaluate to false if all sub-conditions evaluate to false
(skip) Logical Operators > OrOperator ($or) > should evaluate to false for an empty array of conditions (vacuously false)
(skip) Logical Operators > OrOperator ($or) > should pass context to sub-conditions if needed
(skip) Logical Operators > OrOperator ($or) > should throw error if constructor value is not an array
(skip) Logical Operators > OrOperator ($or) > should throw error if array elements are not objects (potential QueryOperators)
(skip) Logical Operators > NotOperator ($not) > should invert the result of the sub-condition
(skip) Logical Operators > NotOperator ($not) > should work with regex sub-condition
(skip) Logical Operators > NotOperator ($not) > should pass context to sub-condition if needed
(skip) Logical Operators > NotOperator ($not) > should throw error if constructor value is not an object
(skip) Logical Operators > NorOperator ($nor) > should evaluate to true if all sub-conditions evaluate to false
(skip) Logical Operators > NorOperator ($nor) > should evaluate to false if any sub-condition evaluates to true
(skip) Logical Operators > NorOperator ($nor) > should evaluate to true for an empty array of conditions (vacuously true)
(skip) Logical Operators > NorOperator ($nor) > should pass context to sub-conditions if needed
(skip) Logical Operators > NorOperator ($nor) > should throw error if constructor value is not an array
(skip) Logical Operators > NorOperator ($nor) > should throw error if array elements are not objects (potential QueryOperators)

src/query/__tests__/compile_query.test.ts:
(skip) compileQuery > Field Equality > should compile simple equality check
(skip) compileQuery > Field Equality > should compile nested field equality check
(skip) compileQuery > Field Equality > should handle field names requiring bracket notation
(skip) compileQuery > Field Equality > should handle multiple field checks (implicit AND)
(skip) compileQuery > Comparison Operators > should compile $eq
(skip) compileQuery > Comparison Operators > should compile $gt
(skip) compileQuery > Comparison Operators > should compile $gte
(skip) compileQuery > Comparison Operators > should compile $lt
(skip) compileQuery > Comparison Operators > should compile $lte
(skip) compileQuery > Comparison Operators > should compile $ne
(skip) compileQuery > Comparison Operators > should compile $in
(skip) compileQuery > Comparison Operators > should compile $in with different types
(skip) compileQuery > Comparison Operators > should compile $nin
(skip) compileQuery > Logical Operators > should compile $and
(skip) compileQuery > Logical Operators > should compile $or
(skip) compileQuery > Logical Operators > should compile $not
(skip) compileQuery > Logical Operators > should compile $not with field
(skip) compileQuery > Logical Operators > should compile $nor
(skip) compileQuery > Logical Operators > should handle nested logical operators
(skip) compileQuery > Element Operators > should compile $exists: true
(skip) compileQuery > Element Operators > should compile $exists: false
(skip) compileQuery > Element Operators > should compile $exists on nested fields
(skip) compileQuery > Evaluation Operators > $regex > should compile $regex with string value
(skip) compileQuery > Evaluation Operators > $regex > should compile $regex with standard RegExp value
(skip) compileQuery > Evaluation Operators > $regex > should compile implicit $regex with RegExp at field level
(skip) compileQuery > Evaluation Operators > $regex > should compile $regex with $options
(skip) compileQuery > Evaluation Operators > $regex > should handle multiple regex on different fields
(skip) compileQuery > Evaluation Operators > $regex > should return false for invalid $regex pattern at runtime
(skip) compileQuery > Evaluation Operators > $regex > should return error for invalid $options string during compilation
(skip) compileQuery > Evaluation Operators > $regex > should return error if $regex value is not string/RegExp/object
(skip) compileQuery > Evaluation Operators > $regex > should return error if $options value is not string
(skip) compileQuery > Evaluation Operators > $type > should match type using string alias
(skip) compileQuery > Evaluation Operators > $type > should match type number
(skip) compileQuery > Evaluation Operators > $type > should match type using array of type names
(skip) compileQuery > Evaluation Operators > $type > should match null type
(skip) compileQuery > Evaluation Operators > $type > should match undefined type
(skip) compileQuery > Evaluation Operators > $type > should match array type
(skip) compileQuery > Evaluation Operators > $type > should match object type
(skip) compileQuery > Evaluation Operators > $type > should match date type
(skip) compileQuery > Evaluation Operators > $type > should match regexp type
(skip) compileQuery > Evaluation Operators > $type > should return error for invalid type alias
(skip) compileQuery > Evaluation Operators > $type > should return error for invalid type in array
(skip) compileQuery > Evaluation Operators > $type > should return error if value is not string/array
(skip) compileQuery > Evaluation Operators > $type > should match special object types (date, regexp, buffer)
(skip) compileQuery > Evaluation Operators (Compiled) > $mod > should compile $mod operator
(skip) compileQuery > Evaluation Operators (Compiled) > $mod > should compile $mod with non-zero remainder
(skip) compileQuery > Evaluation Operators (Compiled) > $mod > should return false for non-integer values with $mod
(skip) compileQuery > Evaluation Operators (Compiled) > $mod > should return error for invalid $mod arguments during compilation
(skip) compileQuery > Evaluation Operators (Compiled) > $where > should compile $where with a function string
(skip) compileQuery > Evaluation Operators (Compiled) > $where > should compile $where with a function object
(skip) compileQuery > Evaluation Operators (Compiled) > $where > should compile query combining $where and other conditions
(skip) compileQuery > Evaluation Operators (Compiled) > $where > should return error during compilation for invalid $where argument
(skip) compileQuery > Evaluation Operators (Compiled) > $where > should handle errors within the $where function execution
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should compile $text with simple search string
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should compile $text with $caseSensitive: true
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should compile $text with $caseSensitive: false
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should compile $text with search string containing extra spaces
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should return error during compilation for missing $search
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should return error during compilation for non-string $search
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should return error during compilation for empty $search string
(skip) compileQuery > Evaluation Operators (Compiled) > $text > should return error during compilation for non-boolean $caseSensitive
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAllSet > should compile $bitsAllSet with bitmask
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAllSet > should compile $bitsAllSet with position array
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAllSet > should return error for invalid $bitsAllSet arguments
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAnySet > should compile $bitsAnySet with bitmask
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAnySet > should compile $bitsAnySet with position array
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAllClear > should compile $bitsAllClear with bitmask
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAllClear > should compile $bitsAllClear with position array
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAnyClear > should compile $bitsAnyClear with bitmask
(skip) compileQuery > Bitwise Operators (Compiled) > $bitsAnyClear > should compile $bitsAnyClear with position array
(skip) compileQuery > Array Operators (Compiled) > $all > should compile $all operator
(skip) compileQuery > Array Operators (Compiled) > $all > should compile $all with empty array (matches arrays)
(skip) compileQuery > Array Operators (Compiled) > $all > should compile $all matching non-array field with single-element query array
(skip) compileQuery > Array Operators (Compiled) > $all > should compile $all NOT matching non-array field with multi-element query array
(skip) compileQuery > Array Operators (Compiled) > $all > should return error for invalid $all arguments
(skip) compileQuery > Array Operators (Compiled) > $size > should compile $size operator
(skip) compileQuery > Array Operators (Compiled) > $size > should compile $size: 0
(skip) compileQuery > Array Operators (Compiled) > $size > should return error for invalid $size arguments
(skip) compileQuery > Array Operators (Compiled) > $elemMatch > should compile $elemMatch with simple condition
(skip) compileQuery > Array Operators (Compiled) > $elemMatch > should compile $elemMatch with multiple conditions
(skip) compileQuery > Array Operators (Compiled) > $elemMatch > should compile $elemMatch with nested operators
(skip) compileQuery > Array Operators (Compiled) > $elemMatch > should return false if sub-query execution throws error
(skip) compileQuery > Array Operators (Compiled) > $elemMatch > should return error for invalid $elemMatch arguments
(skip) compileQuery > Error Handling > should return error for invalid $and operand
(skip) compileQuery > Error Handling > should return error for invalid $or operand
(skip) compileQuery > Error Handling > should return error for invalid $in operand
(skip) compileQuery > Error Handling > should return error for unsupported operator
(skip) compileQuery > should compile an empty query to match everything
(skip) compileQuery > should handle primitive query as implicit $eq
(skip) compileQuery > should handle array query as implicit $eq

src/query/__tests__/operators.test.ts:
(skip) Logical Operators > $and > should return true when all conditions are true
(skip) Logical Operators > $and > should return false when any condition is false
(skip) Logical Operators > $and > should throw error for invalid input
(skip) Logical Operators > $or > should return true when any condition is true
(skip) Logical Operators > $or > should return false when all conditions are false
(skip) Logical Operators > $not > should negate condition result
(skip) Logical Operators > $nor > should return true when all conditions are false
(skip) Logical Operators > $nor > should return false when any condition is true
(skip) Element Operators > $exists > should return true when field exists
(skip) Element Operators > $exists > should return false when field does not exist
(skip) Element Operators > $exists > should throw error for invalid input
(skip) Element Operators > $type > should correctly identify string type
(skip) Element Operators > $type > should support multiple types
(skip) Element Operators > $type > should throw error for invalid type
(skip) Array Operators > $all > should return true when array contains all elements
(skip) Array Operators > $all > should return false when array missing elements
(skip) Array Operators > $all > should throw error for non-array input
(skip) Array Operators > $elemMatch > should match array elements with condition
(skip) Array Operators > $elemMatch > should not match when no elements satisfy condition
(skip) Array Operators > $size > should match arrays of exact size
(skip) Evaluation Operators > $mod > should correctly check modulo
(skip) Evaluation Operators > $mod > should throw error for invalid input
(skip) Evaluation Operators > $regex > should match pattern
(skip) Evaluation Operators > $regex > should support options
(skip) Evaluation Operators > $where > should evaluate function
(skip) Bitwise Operators > $bitsAllSet > should check if all bits are set
(skip) Bitwise Operators > $bitsAnySet > should check if any bits are set
(skip) Text Search Operator > $text > should match text search
(skip) Text Search Operator > $text > should respect case sensitivity
(skip) Text Search Operator > $text > should throw error for invalid input

src/query/__tests__/element.test.ts:
(skip) Element Operators > ExistsOperator ($exists) > $exists: true > should evaluate to true for defined values (string, number, boolean, object, array, null)
(skip) Element Operators > ExistsOperator ($exists) > $exists: true > should evaluate to false for undefined
(skip) Element Operators > ExistsOperator ($exists) > $exists: false > should evaluate to false for defined values (string, number, boolean, object, array, null)
(skip) Element Operators > ExistsOperator ($exists) > $exists: false > should evaluate to true for undefined
(skip) Element Operators > ExistsOperator ($exists) > should throw error if constructor value is not boolean
(skip) Element Operators > TypeOperator ($type) > should match basic types using string alias
(skip) Element Operators > TypeOperator ($type) > should not match incorrect basic types (string alias)
(skip) Element Operators > TypeOperator ($type) > should match basic types using numeric alias
(skip) Element Operators > TypeOperator ($type) > should match newly added types (objectId, binData, regex)
(skip) Element Operators > TypeOperator ($type) > should match if type is in an array of types
(skip) Element Operators > TypeOperator ($type) > should throw error for invalid constructor arguments

src/query/__tests__/comparison.test.ts:
(skip) Comparison Utilities > deepCompare > should return true for identical primitive values
(skip) Comparison Utilities > deepCompare > should return false for different primitive values
(skip) Comparison Utilities > deepCompare > should return true for identical Date objects
(skip) Comparison Utilities > deepCompare > should return false for different Date objects
(skip) Comparison Utilities > deepCompare > should return true for identical arrays (shallow & nested)
(skip) Comparison Utilities > deepCompare > should return false for arrays with different lengths
(skip) Comparison Utilities > deepCompare > should return false for arrays with different elements
(skip) Comparison Utilities > deepCompare > should return false when comparing array with non-array
(skip) Comparison Utilities > deepCompare > should return false for different objects
(skip) Comparison Utilities > deepCompare > should return true for identical objects (same reference)
(skip) Comparison Utilities > compareBSONValues > should return null if either argument is undefined
(skip) Comparison Utilities > compareBSONValues > should return 0 for undefined vs undefined
(skip) Comparison Utilities > compareBSONValues > should return 0 for deeply equal values (primitives, dates, arrays)
(skip) Comparison Utilities > compareBSONValues > should compare numbers correctly
(skip) Comparison Utilities > compareBSONValues > should compare strings correctly
(skip) Comparison Utilities > compareBSONValues > should compare dates correctly
(skip) Comparison Utilities > compareBSONValues > should compare booleans correctly (false < true)
(skip) Comparison Utilities > compareBSONValues > should compare arrays element-wise based on BSON order
(skip) Comparison Utilities > compareBSONValues > should compare arrays by length if elements are equal
(skip) Comparison Utilities > compareBSONValues > should compare different types based on BSON order
(skip) Comparison Utilities > compareBSONValues > should return 0 for objects (considered equal for ordering)
(skip) Comparison Operators > EqOperator ($eq) > should create an EqOperator instance
(skip) Comparison Operators > EqOperator ($eq) > should evaluate to true for equal values
(skip) Comparison Operators > EqOperator ($eq) > should evaluate to false for non-equal values
(skip) Comparison Operators > EqOperator ($eq) > should evaluate to false for different types
(skip) Comparison Operators > EqOperator ($eq) > should handle undefined correctly (matching MongoDB $eq behavior)
(skip) Comparison Operators > NeOperator ($ne) > should create an NeOperator instance
(skip) Comparison Operators > NeOperator ($ne) > should evaluate to false for equal values
(skip) Comparison Operators > NeOperator ($ne) > should evaluate to true for non-equal values
(skip) Comparison Operators > NeOperator ($ne) > should evaluate to true for different types
(skip) Comparison Operators > NeOperator ($ne) > should handle undefined correctly (matching MongoDB $ne behavior)
(skip) Comparison Operators > GtOperator ($gt) > should create a GtOperator instance
(skip) Comparison Operators > GtOperator ($gt) > should evaluate to true when value > queryValue (same type)
(skip) Comparison Operators > GtOperator ($gt) > should evaluate to false when value <= queryValue (same type)
(skip) Comparison Operators > GtOperator ($gt) > should use BSON comparison order for different types
(skip) Comparison Operators > GtOperator ($gt) > should evaluate to false if value is incomparable (null/undefined)
(skip) Comparison Operators > GtOperator ($gt) > should evaluate to false if queryValue is incomparable (undefined)
(skip) Comparison Operators > GteOperator ($gte) > should create a GteOperator instance
(skip) Comparison Operators > GteOperator ($gte) > should evaluate to true when value >= queryValue (same type)
(skip) Comparison Operators > GteOperator ($gte) > should evaluate to false when value < queryValue (same type)
(skip) Comparison Operators > GteOperator ($gte) > should use BSON comparison order for different types (>=)
(skip) Comparison Operators > GteOperator ($gte) > should evaluate to false if value is incomparable (null/undefined)
(skip) Comparison Operators > GteOperator ($gte) > should evaluate correctly if queryValue is incomparable (undefined)
(skip) Comparison Operators > LtOperator ($lt) > should create an LtOperator instance
(skip) Comparison Operators > LtOperator ($lt) > should evaluate to true when value < queryValue (same type)
(skip) Comparison Operators > LtOperator ($lt) > should evaluate to false when value >= queryValue (same type)
(skip) Comparison Operators > LtOperator ($lt) > should use BSON comparison order for different types (<)
(skip) Comparison Operators > LtOperator ($lt) > should evaluate to false if value is incomparable (null/undefined)
(skip) Comparison Operators > LtOperator ($lt) > should evaluate to false if queryValue is incomparable (undefined)
(skip) Comparison Operators > LteOperator ($lte) > should create an LteOperator instance
(skip) Comparison Operators > LteOperator ($lte) > should evaluate to true when value <= queryValue (same type)
(skip) Comparison Operators > LteOperator ($lte) > should evaluate to false when value > queryValue (same type)
(skip) Comparison Operators > LteOperator ($lte) > should use BSON comparison order for different types (<=)
(skip) Comparison Operators > LteOperator ($lte) > should evaluate to false if value is incomparable (null/undefined)
(skip) Comparison Operators > LteOperator ($lte) > should evaluate correctly if queryValue is incomparable (undefined)
(skip) Comparison Operators > InOperator ($in) > should create an InOperator instance
(skip) Comparison Operators > InOperator ($in) > should evaluate to true if value matches any element in the array (BSON comparison)
(skip) Comparison Operators > InOperator ($in) > should evaluate to false if value matches no element in the array (BSON comparison)
(skip) Comparison Operators > InOperator ($in) > should handle mixed types in array based on BSON comparison
(skip) Comparison Operators > InOperator ($in) > should support RegExp elements in the query array
(skip) Comparison Operators > InOperator ($in) > should evaluate to false if field value is undefined (unless undefined is in array)
(skip) Comparison Operators > NinOperator ($nin) > should create a NinOperator instance
(skip) Comparison Operators > NinOperator ($nin) > should evaluate to false if value matches any element in the array (BSON comparison)
(skip) Comparison Operators > NinOperator ($nin) > should evaluate to true if value matches no element in the array (BSON comparison)
(skip) Comparison Operators > NinOperator ($nin) > should handle mixed types in array based on BSON comparison
(skip) Comparison Operators > NinOperator ($nin) > should support RegExp elements in the query array (negated)
(skip) Comparison Operators > NinOperator ($nin) > should evaluate correctly if field value is undefined (consistent with MongoDB)

src/query/__tests__/evaluation.test.ts:
(skip) Evaluation Operators > ModOperator ($mod) > should return true if value % divisor === remainder
(skip) Evaluation Operators > ModOperator ($mod) > should return false if value % divisor !== remainder
(skip) Evaluation Operators > ModOperator ($mod) > should return false for non-numeric values
(skip) Evaluation Operators > ModOperator ($mod) > should work with BigInt
(skip) Evaluation Operators > ModOperator ($mod) > should throw error for invalid constructor arguments
(skip) Evaluation Operators > RegexOperator ($regex) > should match string field using RegExp object
(skip) Evaluation Operators > RegexOperator ($regex) > should match string field using string pattern (no flags)
(skip) Evaluation Operators > RegexOperator ($regex) > should match string field using object notation with options
(skip) Evaluation Operators > RegexOperator ($regex) > should match string field using object notation without options
(skip) Evaluation Operators > RegexOperator ($regex) > should return false for non-string field values (MongoDB behavior)
(skip) Evaluation Operators > RegexOperator ($regex) > should throw error for invalid constructor arguments
(skip) Evaluation Operators > WhereOperator ($where) > should evaluate function using document context ('this' and 'obj')
(skip) Evaluation Operators > WhereOperator ($where) > should evaluate string expression using document context ('this' and 'obj')
(skip) Evaluation Operators > WhereOperator ($where) > should return false if context is not a valid object
(skip) Evaluation Operators > WhereOperator ($where) > should return false if function/expression throws an error
(skip) Evaluation Operators > WhereOperator ($where) > should throw error for invalid constructor argument types
(skip) Evaluation Operators > WhereOperator ($where) > should throw error for invalid string expression syntax

src/query/__tests__/array.test.ts:
(skip) Array Operators > AllOperator ($all) > should return true if array contains all specified values (BSON comparison)
(skip) Array Operators > AllOperator ($all) > should return false if array does not contain all specified values (BSON comparison)
(skip) Array Operators > AllOperator ($all) > should handle non-array field values according to MongoDB behavior
(skip) Array Operators > AllOperator ($all) > should handle empty query array (matches any array, including empty)
(skip) Array Operators > AllOperator ($all) > should throw error if constructor argument is not an array
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should return true if at least one element matches the condition
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should return true if multiple elements match the condition
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should return false if no element matches the condition
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should return false if the target field is not an array
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should return false for an empty array
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should return error during compilation for invalid $elemMatch condition
(skip) Array Operators > ElemMatchOperator ($elemMatch) > should handle errors within the sub-query execution gracefully
(skip) Array Operators > SizeOperator ($size) > should return true if array length matches the specified size
(skip) Array Operators > SizeOperator ($size) > should return false if array length does not match the specified size
(skip) Array Operators > SizeOperator ($size) > should return false for non-array field values
(skip) Array Operators > SizeOperator ($size) > should throw error for invalid constructor arguments

src/client/offline/day1-summary.test.ts:
(skip) Phase 5.3 Day 1: Core Offline Infrastructure - Summary > should have all required exports
(skip) Phase 5.3 Day 1: Core Offline Infrastructure - Summary > should meet performance requirements
(skip) Phase 5.3 Day 1: Core Offline Infrastructure - Summary > should validate Day 1 requirements checklist
(skip) Phase 5.3 Day 1: Core Offline Infrastructure - Summary > should document Day 1 achievements
(skip) Phase 5.3 Day 1: Core Offline Infrastructure - Summary > should prepare for Day 2: Conflict Resolution System

src/auth/computed/tests/interfaces.test.ts:
(skip) Computed Attributes Interfaces > Type Definitions > should have proper interface structure for IComputedAttributeEngine
(skip) Computed Attributes Interfaces > Type Definitions > should have proper interface structure for IComputedAttributeCache
(skip) Computed Attributes Interfaces > Type Definitions > should have proper ComputedAttributeDefinition structure
(skip) Computed Attributes Interfaces > Type Definitions > should have proper ComputationContext structure
(skip) Computed Attributes Interfaces > Type Safety > should enforce correct target types
(skip) Computed Attributes Interfaces > Type Safety > should enforce correct cache eviction policies
(skip) Computed Attributes Module Export > should export version and module information
(skip) Computed Attributes Module Export > should export all required interfaces and types

src/auth/computed/tests/types.test.ts:
(skip) Computed Attributes Types - Day 2 > Dependency Types > should have proper AttributeDependencyDetailed structure
(skip) Computed Attributes Types - Day 2 > Dependency Types > should have proper DependencyGraph structure
(skip) Computed Attributes Types - Day 2 > Dependency Types > should have proper DependencyChangeEvent structure
(skip) Computed Attributes Types - Day 2 > Dependency Types > should have proper IDependencyResolver interface structure
(skip) Computed Attributes Types - Day 2 > Error Types > should have proper ComputedAttributeErrorDetailed structure
(skip) Computed Attributes Types - Day 2 > Error Types > should have proper error code enumeration
(skip) Computed Attributes Types - Day 2 > Error Types > should have proper error categories
(skip) Computed Attributes Types - Day 2 > Error Types > should have proper error severity levels
(skip) Computed Attributes Types - Day 2 > Error Types > should create errors using ComputedAttributeErrorFactory
(skip) Computed Attributes Types - Day 2 > Error Types > should have proper IErrorHandler interface structure
(skip) Computed Attributes Types - Day 2 > Monitoring Types > should have proper ComputedAttributeMetrics structure
(skip) Computed Attributes Types - Day 2 > Monitoring Types > should have proper PerformanceMonitor structure
(skip) Computed Attributes Types - Day 2 > Monitoring Types > should have proper HealthCheckResult structure
(skip) Computed Attributes Types - Day 2 > Monitoring Types > should have proper IMonitoringService interface structure
(skip) Computed Attributes Types - Day 2 > Type Safety and Validation > should enforce correct dependency types
(skip) Computed Attributes Types - Day 2 > Type Safety and Validation > should enforce correct priority levels
(skip) Computed Attributes Types - Day 2 > Type Safety and Validation > should enforce correct health status values
(skip) Computed Attributes Module Export - Day 2 > should export all new types and interfaces
(skip) Computed Attributes Module Export - Day 2 > should export error factory class

src/auth/computed/tests/ComputedAttributeEngine.test.ts:
(skip) ComputedAttributeEngine > Initialization > should initialize successfully
(skip) ComputedAttributeEngine > Initialization > should throw error when initializing twice
(skip) ComputedAttributeEngine > Attribute Registration > should register a simple attribute
(skip) ComputedAttributeEngine > Attribute Registration > should throw error for duplicate attribute ID
(skip) ComputedAttributeEngine > Attribute Registration > should validate attribute definition
(skip) ComputedAttributeEngine > Attribute Registration > should unregister an attribute
(skip) ComputedAttributeEngine > Attribute Registration > should throw error when unregistering non-existent attribute
(skip) ComputedAttributeEngine > Attribute Listing > should list all attributes
(skip) ComputedAttributeEngine > Attribute Listing > should filter attributes by target type
(skip) ComputedAttributeEngine > Attribute Computation > should compute a single attribute
(skip) ComputedAttributeEngine > Attribute Computation > should compute multiple attributes
(skip) ComputedAttributeEngine > Attribute Computation > should compute all attributes for target type
(skip) ComputedAttributeEngine > Attribute Computation > should throw error for non-existent attribute
(skip) ComputedAttributeEngine > Attribute Computation > should handle computation errors gracefully
(skip) ComputedAttributeEngine > Cache Management > should get cache stats
(skip) ComputedAttributeEngine > Cache Management > should clear all cache
(skip) ComputedAttributeEngine > Cache Management > should invalidate cache for specific attribute
(skip) ComputedAttributeEngine > Cache Management > should invalidate cache for specific attribute and target
(skip) ComputedAttributeEngine > Validation > should validate valid definition
(skip) ComputedAttributeEngine > Validation > should detect invalid definition
(skip) ComputedAttributeEngine > Validation > should provide warnings for missing description
(skip) ComputedAttributeEngine > Health Status > should report healthy status
(skip) ComputedAttributeEngine > Event Handling > should emit computed events
(skip) ComputedAttributeEngine > Event Handling > should emit error events
(skip) ComputedAttributeEngine > Configuration > should use default configuration
(skip) ComputedAttributeEngine > Configuration > should use custom configuration

src/auth/computed/tests/Day8Schema.test.ts:
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Configuration > should initialize with default configuration
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Configuration > should update configuration
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Configuration > should use custom configuration
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Extension > should extend schema with computed attributes
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Extension > should validate base schema
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Extension > should enforce attribute limit
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Extension > should generate schema documentation
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Validation > should validate field definitions
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Validation > should detect reserved field names
(skip) Day 8 Schema Integration Implementation > SchemaExtensions > Schema Validation > should validate indexes
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Configuration > should initialize with default configuration
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Configuration > should update configuration
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Attribute Validation > should validate valid attribute
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Attribute Validation > should detect missing required fields
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Attribute Validation > should validate ID format
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Attribute Validation > should validate target type
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Attribute Validation > should validate document-level attributes require target collection
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Dependency Validation > should validate field dependencies
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Dependency Validation > should validate collection dependencies
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Dependency Validation > should validate external API dependencies
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Dependency Validation > should warn about high dependency count
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Security Validation > should validate external request security
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Security Validation > should validate timeout settings
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Security Validation > should validate memory usage limits
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Performance Validation > should warn about disabled caching
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Performance Validation > should warn about short cache TTL
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Performance Validation > should warn about long cache TTL
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Business Logic Validation > should detect duplicate attribute IDs
(skip) Day 8 Schema Integration Implementation > AttributeValidator > Business Logic Validation > should warn about similar attribute names
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Configuration > should initialize with default configuration
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Configuration > should update configuration
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Collection Integration > should integrate computed attributes with collection
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Collection Integration > should handle validation errors
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Collection Integration > should handle schema extension errors
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Schema Versioning > should create schema versions
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Schema Versioning > should increment version numbers
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Schema Cache > should cache extended schemas
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Schema Cache > should clear cache
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Attribute Updates > should add new attributes
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Attribute Updates > should remove attributes
(skip) Day 8 Schema Integration Implementation > SchemaIntegration > Attribute Updates > should modify attributes
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > User-level Attributes > should provide user-level attributes
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > User-level Attributes > should have valid user attribute definitions
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Document-level Attributes > should provide document-level attributes
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Collection-level Attributes > should provide collection-level attributes
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Database-level Attributes > should provide database-level attributes
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Utility Methods > should get all built-in attributes
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Utility Methods > should get attributes by target type
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Utility Methods > should get attribute by ID
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Utility Methods > should return undefined for non-existent attribute ID
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Attribute Computation > should compute user profile completeness
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Attribute Computation > should compute partial user profile completeness
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Attribute Computation > should compute document age
(skip) Day 8 Schema Integration Implementation > BuiltInAttributes > Attribute Computation > should handle missing data gracefully

src/auth/computed/tests/Day5Cache.test.ts:
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Initialization and Configuration > should initialize successfully
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Initialization and Configuration > should throw error when initializing twice
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Initialization and Configuration > should update configuration
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Initialization and Configuration > should shutdown properly
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Basic Cache Operations > should set and get cache values
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Basic Cache Operations > should return null for non-existent keys
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Basic Cache Operations > should check if key exists
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Basic Cache Operations > should delete specific cache entries
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Basic Cache Operations > should clear all cache
(skip) Day 5 Cache Implementation > ComputedAttributeCache > TTL and Expiration > should expire entries after TTL
(skip) Day 5 Cache Implementation > ComputedAttributeCache > TTL and Expiration > should use default TTL when not specified
(skip) Day 5 Cache Implementation > ComputedAttributeCache > TTL and Expiration > should handle different TTL values
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Dependencies and Invalidation > should store and retrieve dependencies
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Dependencies and Invalidation > should invalidate by attribute ID
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Dependencies and Invalidation > should invalidate by attribute ID and target ID
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Dependencies and Invalidation > should invalidate by dependency
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Dependencies and Invalidation > should invalidate by target
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Cache Management and Cleanup > should perform cleanup of expired entries
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Cache Management and Cleanup > should compact cache and free memory
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Cache Management and Cleanup > should handle cache size limits with eviction
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Statistics and Monitoring > should provide cache statistics
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Statistics and Monitoring > should provide health status
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Statistics and Monitoring > should track operation results
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Advanced Features > should get all cache keys
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Advanced Features > should filter keys by pattern
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Advanced Features > should inspect cache entries
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Advanced Features > should export and import cache data
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Advanced Features > should skip expired entries during import
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Event Handling > should emit cache hit events
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Event Handling > should emit cache miss events
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Event Handling > should emit set events
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Event Handling > should emit invalidated events
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Error Handling > should handle initialization errors
(skip) Day 5 Cache Implementation > ComputedAttributeCache > Error Handling > should handle invalid cache operations gracefully

src/auth/computed/tests/Day6Invalidator.test.ts:
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Initialization and Configuration > should initialize successfully
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Initialization and Configuration > should throw error when initializing twice
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Initialization and Configuration > should update configuration
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Initialization and Configuration > should use default configuration
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Basic Invalidation Operations > should invalidate by attribute ID
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Basic Invalidation Operations > should invalidate by attribute ID and target ID
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Basic Invalidation Operations > should invalidate by dependency
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Basic Invalidation Operations > should invalidate by target
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Basic Invalidation Operations > should invalidate by collection
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Batch Invalidation > should process batch invalidation
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Batch Invalidation > should queue invalidations for batch processing
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Batch Invalidation > should process batch when size limit reached
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Dependency-based Invalidation > should handle cascading invalidations
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Dependency-based Invalidation > should prevent infinite cascading
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Database Integration > should handle database change events
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Database Integration > should handle collection change events
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Metrics and Monitoring > should track invalidation metrics
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Metrics and Monitoring > should track failed invalidations
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Metrics and Monitoring > should clear metrics
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Metrics and Monitoring > should track batch invalidations
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Event Handling > should emit invalidated events
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Event Handling > should emit batch invalidated events
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Event Handling > should emit configuration updated events
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Event Handling > should emit error events for cascading failures
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Error Handling > should handle invalidation without cache set
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Error Handling > should handle batch invalidation errors gracefully
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Error Handling > should handle shutdown with pending invalidations
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Configuration Validation > should work with different batch configurations
(skip) Day 6 Cache Invalidator Implementation > CacheInvalidator > Configuration Validation > should work with dependency tracking disabled

src/auth/computed/tests/Day4Components.test.ts:
(skip) Day 4 Components > DependencyTracker > should initialize successfully
(skip) Day 4 Components > DependencyTracker > should throw error when initializing twice
(skip) Day 4 Components > DependencyTracker > should add dependency successfully
(skip) Day 4 Components > DependencyTracker > should detect circular dependencies
(skip) Day 4 Components > DependencyTracker > should resolve dependency order
(skip) Day 4 Components > DependencyTracker > should validate dependencies
(skip) Day 4 Components > DependencyTracker > should get affected attributes
(skip) Day 4 Components > DependencyTracker > should emit dependency change events
(skip) Day 4 Components > MemoryLimitManager > should initialize successfully
(skip) Day 4 Components > MemoryLimitManager > should start and end computation tracking
(skip) Day 4 Components > MemoryLimitManager > should provide memory statistics
(skip) Day 4 Components > MemoryLimitManager > should track active computations
(skip) Day 4 Components > MemoryLimitManager > should handle timeout protection
(skip) Day 4 Components > MemoryLimitManager > should emit computation events
(skip) Day 4 Components > MemoryLimitManager > should cleanup all computations
(skip) Day 4 Components > ComputationContextBuilder > should initialize successfully
(skip) Day 4 Components > ComputationContextBuilder > should build basic context
(skip) Day 4 Components > ComputationContextBuilder > should build user context
(skip) Day 4 Components > ComputationContextBuilder > should build document context
(skip) Day 4 Components > ComputationContextBuilder > should validate required fields
(skip) Day 4 Components > ComputationContextBuilder > should create auth context
(skip) Day 4 Components > ComputationContextBuilder > should handle custom data size limits
(skip) Day 4 Components > ComputationContextBuilder > should update configuration
(skip) Day 4 Components > SimpleHttpClient > should create http client
(skip) Day 4 Components > SimpleHttpClient > should have correct method signatures

src/auth/functions/tests/ESBuildTranspiler.test.ts:
(skip) ESBuildTranspiler > Basic Functionality > should initialize successfully
(skip) ESBuildTranspiler > Basic Functionality > should transpile simple TypeScript code
(skip) ESBuildTranspiler > Basic Functionality > should handle TypeScript with return statement
(skip) ESBuildTranspiler > Basic Functionality > should detect syntax errors
(skip) ESBuildTranspiler > Configuration > should support different targets
(skip) ESBuildTranspiler > Configuration > should support source maps
(skip) ESBuildTranspiler > Validation > should validate correct TypeScript code
(skip) ESBuildTranspiler > Validation > should detect validation errors
(skip) ESBuildTranspiler > Features Support > should support TypeScript features
(skip) ESBuildTranspiler > Features Support > should not support unsupported features
(skip) ESBuildTranspiler > Default Configuration > should provide sensible defaults
(skip) ESBuildTranspiler > Multiple Files > should transpile multiple files
(skip) ESBuildTranspiler > Caching > should cache transpilation results

src/auth/functions/tests/StoredFunctionEngine.test.ts:
(skip) StoredFunctionEngine Integration > Function Definition Validation > should validate basic function definition structure
(skip) StoredFunctionEngine Integration > Function Definition Validation > should validate TypeScript code compilation
(skip) StoredFunctionEngine Integration > Function Definition Validation > should detect security violations in code
(skip) StoredFunctionEngine Integration > Function Execution > should execute simple scalar function
(skip) StoredFunctionEngine Integration > Function Execution > should execute function with complex TypeScript
(skip) StoredFunctionEngine Integration > Function Execution > should handle execution errors gracefully
(skip) StoredFunctionEngine Integration > Function Execution > should enforce execution timeout
(skip) StoredFunctionEngine Integration > Caching > should cache compilation results
(skip) StoredFunctionEngine Integration > Caching > should clear compilation cache
(skip) StoredFunctionEngine Integration > Performance Monitoring > should track execution statistics
(skip) StoredFunctionEngine Integration > Security Features > should block dangerous Node.js APIs
(skip) StoredFunctionEngine Integration > Security Features > should block prototype pollution attempts
(skip) StoredFunctionEngine Integration > Security Features > should provide restricted console access
(skip) Function Engine Architecture > should support pluggable transpiler providers
(skip) Function Engine Architecture > should validate function definition schema

src/auth/functions/tests/SimpleFunctionSandbox.test.ts:
(skip) SimpleFunctionSandbox > Compilation > should compile simple JavaScript code successfully
(skip) SimpleFunctionSandbox > Compilation > should compile simple TypeScript-like code
(skip) SimpleFunctionSandbox > Compilation > should cache compilation results
(skip) SimpleFunctionSandbox > Compilation > should reject code with security issues
(skip) SimpleFunctionSandbox > Security Validation > should detect eval usage
(skip) SimpleFunctionSandbox > Security Validation > should detect Function constructor usage
(skip) SimpleFunctionSandbox > Security Validation > should detect process object access
(skip) SimpleFunctionSandbox > Security Validation > should detect prototype pollution attempts
(skip) SimpleFunctionSandbox > Security Validation > should allow safe code
(skip) SimpleFunctionSandbox > Execution > should execute simple function successfully
(skip) SimpleFunctionSandbox > Execution > should execute TypeScript code end-to-end
(skip) SimpleFunctionSandbox > Execution > should handle execution timeout
(skip) SimpleFunctionSandbox > Execution > should provide sandbox environment
(skip) SimpleFunctionSandbox > Monitoring > should track execution statistics
(skip) SimpleFunctionSandbox > Monitoring > should handle execution termination
(skip) SimpleFunctionSandbox > Cache Management > should cache and retrieve compiled code
(skip) SimpleFunctionSandbox > Cache Management > should clear compilation cache
(skip) SimpleFunctionSandbox > Configuration > should return sandbox configuration
(skip) SimpleFunctionSandbox > Configuration > should check module permissions
(skip) SimpleFunctionSandbox > Type Validation > should validate correct syntax
(skip) SimpleFunctionSandbox > Type Validation > should detect syntax errors
(skip) SimpleFunctionSandbox > Type Validation > should get diagnostics for code

src/auth/authorization/tests/RBACEngine.test.ts:
(skip) RBACEngine > Basic Permission Checking > should allow access when RBAC is disabled
(skip) RBACEngine > Basic Permission Checking > should deny access when user has no roles
(skip) RBACEngine > Basic Permission Checking > should handle permission matching correctly
(skip) RBACEngine > Admin Override > should allow admin override when not in strict mode
(skip) RBACEngine > Admin Override > should not allow admin override in strict mode
(skip) RBACEngine > Resource String Conversion > should convert database resource correctly
(skip) RBACEngine > Resource String Conversion > should convert document resource correctly
(skip) RBACEngine > Resource String Conversion > should convert field resource correctly
(skip) RBACEngine > Configuration Management > should get current configuration
(skip) RBACEngine > Configuration Management > should update configuration
(skip) RBACEngine > Health Check > should perform health check successfully
(skip) RBACEngine > Error Handling > should handle evaluation errors gracefully
(skip) RBACEngine > Default Deny Policy > should respect default deny configuration

src/auth/authorization/tests/ABACEngine.test.ts:
(skip) ABACEngine > Basic ABAC Functionality > should allow access when ABAC is disabled
(skip) ABACEngine > Basic ABAC Functionality > should evaluate user attributes
(skip) ABACEngine > Basic ABAC Functionality > should handle document attributes for document resources
(skip) ABACEngine > Access Level Control > should deny access to high security resources for medium access users
(skip) ABACEngine > Access Level Control > should allow access to high security resources for high access users
(skip) ABACEngine > Time-Based Access Control > should deny sensitive operations outside business hours
(skip) ABACEngine > Time-Based Access Control > should allow sensitive operations during business hours
(skip) ABACEngine > Region-Based Access Control > should deny access from unauthorized regions
(skip) ABACEngine > Region-Based Access Control > should allow access from authorized regions
(skip) ABACEngine > Activity-Based Access Control > should deny sensitive operations for stale sessions
(skip) ABACEngine > Document Ownership > should allow access to owned documents
(skip) ABACEngine > Configuration Management > should get current configuration
(skip) ABACEngine > Configuration Management > should update configuration
(skip) ABACEngine > Health Check > should perform health check successfully
(skip) ABACEngine > Error Handling > should handle attribute evaluation errors gracefully
(skip) ABACEngine > Error Handling > should handle ComputedAttributeEngine errors
(skip) ABACEngine > Default Deny Policy > should respect default deny configuration
(skip) ABACEngine > Sensitive Actions Detection > should identify sensitive actions correctly
(skip) ABACEngine > High Security Resources Detection > should identify high security resources correctly

src/auth/authorization/tests/Integration.test.ts:
(skip) Phase 2 Authorization System Integration > Core Engine Initialization > should initialize all engines successfully
(skip) Phase 2 Authorization System Integration > Core Engine Initialization > should create individual engines
(skip) Phase 2 Authorization System Integration > Basic Permission Checking > should handle permission requests without errors
(skip) Phase 2 Authorization System Integration > Basic Permission Checking > should handle different resource types
(skip) Phase 2 Authorization System Integration > Cache Functionality > should provide cache statistics
(skip) Phase 2 Authorization System Integration > Cache Functionality > should clear cache without errors
(skip) Phase 2 Authorization System Integration > Cache Functionality > should invalidate cache by pattern
(skip) Phase 2 Authorization System Integration > Dynamic Rules > should add and remove dynamic rules
(skip) Phase 2 Authorization System Integration > Dynamic Rules > should validate dynamic rules
(skip) Phase 2 Authorization System Integration > Configuration Management > should get and update configuration
(skip) Phase 2 Authorization System Integration > Health Monitoring > should provide health status
(skip) Phase 2 Authorization System Integration > Batch Operations > should handle batch permission checks
(skip) Phase 2 Authorization System Integration > Error Handling > should handle invalid resource types gracefully
(skip) Phase 2 Authorization System Integration > Error Handling > should handle missing context gracefully
(skip) Phase 2 Authorization System Integration > Security Policies > should handle admin override detection
(skip) Phase 2 Authorization System Integration > Performance > should handle multiple concurrent requests
(skip) Phase 2 Authorization System Integration > Performance > should track performance metrics

src/auth/authorization/tests/PolicyEvaluator.test.ts:
(skip) PolicyEvaluator > Basic Policy Evaluation > should allow when policies are disabled
(skip) PolicyEvaluator > Basic Policy Evaluation > should apply deny by default principle
(skip) PolicyEvaluator > Basic Policy Evaluation > should allow when all engines allow
(skip) PolicyEvaluator > Basic Policy Evaluation > should apply default policy when no explicit allows
(skip) PolicyEvaluator > Evaluation Order > should apply evaluation order correctly
(skip) PolicyEvaluator > Evaluation Order > should handle missing engines in evaluation order
(skip) PolicyEvaluator > Security Policies > should allow admin override
(skip) PolicyEvaluator > Security Policies > should allow emergency access
(skip) PolicyEvaluator > Security Policies > should deny during maintenance mode
(skip) PolicyEvaluator > Security Policies > should deny when rate limited
(skip) PolicyEvaluator > Security Policies > should allow when no security policies apply
(skip) PolicyEvaluator > Engine Identification > should identify engines from metadata
(skip) PolicyEvaluator > Engine Identification > should identify engines from applied rules
(skip) PolicyEvaluator > Engine Identification > should handle unknown engines
(skip) PolicyEvaluator > Applied Rules Combination > should combine applied rules from all engines
(skip) PolicyEvaluator > Applied Rules Combination > should deduplicate applied rules
(skip) PolicyEvaluator > Configuration Management > should get current configuration
(skip) PolicyEvaluator > Configuration Management > should update configuration
(skip) PolicyEvaluator > Health Check > should perform health check successfully
(skip) PolicyEvaluator > Health Check > should fail health check with invalid configuration
(skip) PolicyEvaluator > Edge Cases > should handle empty results array
(skip) PolicyEvaluator > Edge Cases > should handle results with no metadata
(skip) PolicyEvaluator > Edge Cases > should handle mixed allow/deny results
(skip) PolicyEvaluator > Admin Override Detection > should detect system super admin
(skip) PolicyEvaluator > Admin Override Detection > should detect admin roles
(skip) PolicyEvaluator > Admin Override Detection > should not detect admin for regular users

src/auth/authorization/tests/AuthorizationEngine.test.ts:
(skip) AuthorizationEngine > Basic Permission Checking > should allow access when no restrictions apply
(skip) AuthorizationEngine > Basic Permission Checking > should cache permission results
(skip) AuthorizationEngine > Basic Permission Checking > should handle batch permission checks
(skip) AuthorizationEngine > Dynamic Rules > should add and evaluate dynamic rules
(skip) AuthorizationEngine > Dynamic Rules > should remove dynamic rules
(skip) AuthorizationEngine > Cache Management > should clear permission cache
(skip) AuthorizationEngine > Cache Management > should provide cache statistics
(skip) AuthorizationEngine > Cache Management > should invalidate cache by pattern
(skip) AuthorizationEngine > Configuration Management > should update configuration
(skip) AuthorizationEngine > Configuration Management > should perform health check
(skip) AuthorizationEngine > Error Handling > should handle invalid dynamic rules
(skip) AuthorizationEngine > Error Handling > should handle rule evaluation errors gracefully

src/__test__/client/pagination/QueryOptimizer.test.ts:
(skip) QueryOptimizer > optimizeForPagination > should apply index hints when enabled
(skip) QueryOptimizer > optimizeForPagination > should apply maxScanDocuments limit
(skip) QueryOptimizer > optimizeForPagination > should apply preferred indexes
(skip) QueryOptimizer > optimizeForPagination > should optimize for large datasets
(skip) QueryOptimizer > optimizeForPagination > should optimize complex sorting
(skip) QueryOptimizer > optimizeForPagination > should not modify query when no optimization needed
(skip) QueryOptimizer > generateIndexHints > should generate compound index hints for multi-field sorting
(skip) QueryOptimizer > generateIndexHints > should generate single field hints for single field sorting
(skip) QueryOptimizer > generateIndexHints > should generate filter-based hints
(skip) QueryOptimizer > generateIndexHints > should ignore MongoDB operators in filters
(skip) QueryOptimizer > generateIndexHints > should handle empty sort and filters
(skip) QueryOptimizer > analyzeQueryPerformance > should analyze simple query performance
(skip) QueryOptimizer > analyzeQueryPerformance > should suggest optimization for complex sorting
(skip) QueryOptimizer > analyzeQueryPerformance > should suggest optimization for large page sizes
(skip) QueryOptimizer > analyzeQueryPerformance > should suggest optimization for complex filters
(skip) QueryOptimizer > analyzeQueryPerformance > should suggest optimization for complex sorting complexity
(skip) QueryOptimizer > generateQueryPlan > should generate plan for simple query
(skip) QueryOptimizer > generateQueryPlan > should include cursor step when cursor provided
(skip) QueryOptimizer > generateQueryPlan > should handle query without filters
(skip) QueryOptimizer > generateQueryPlan > should handle query without sorting
(skip) QueryOptimizer > complexity calculations > should calculate sort complexity correctly
(skip) QueryOptimizer > complexity calculations > should calculate filter complexity correctly
(skip) QueryOptimizer > optimization strategies > should optimize for large datasets correctly
(skip) QueryOptimizer > optimization strategies > should optimize complex sorting correctly
(skip) QueryOptimizer > edge cases > should handle empty sort configuration
(skip) QueryOptimizer > edge cases > should handle empty query
(skip) QueryOptimizer > edge cases > should handle very small limits

src/__test__/client/pagination/FactoryFunction.test.ts:
(skip) createAdvancedPagination Factory Function > should create all pagination components
(skip) createAdvancedPagination Factory Function > should create working cursor manager
(skip) createAdvancedPagination Factory Function > should create working sorting engine
(skip) createAdvancedPagination Factory Function > should create working query optimizer
(skip) createAdvancedPagination Factory Function > should create independent instances
(skip) createAdvancedPagination Factory Function > should work in complete workflow

src/__test__/client/pagination/CursorPaginationManager.test.ts:
(skip) CursorPaginationManager > encodeCursor > should encode cursor in simple_id format
(skip) CursorPaginationManager > encodeCursor > should encode cursor in base64_json format
(skip) CursorPaginationManager > encodeCursor > should include timestamp by default in base64_json format
(skip) CursorPaginationManager > encodeCursor > should default to base64_json format when no options provided
(skip) CursorPaginationManager > decodeCursor > should decode simple_id format cursor
(skip) CursorPaginationManager > decodeCursor > should decode base64_json format cursor
(skip) CursorPaginationManager > decodeCursor > should handle invalid base64 as simple_id
(skip) CursorPaginationManager > decodeCursor > should handle malformed JSON as simple_id
(skip) CursorPaginationManager > decodeCursor > should throw error for empty cursor
(skip) CursorPaginationManager > validateCursor > should validate simple_id cursor
(skip) CursorPaginationManager > validateCursor > should validate base64_json cursor
(skip) CursorPaginationManager > validateCursor > should reject empty cursor
(skip) CursorPaginationManager > validateCursor > should handle any string as valid (fallback to simple_id)
(skip) CursorPaginationManager > paginate > should validate collection name
(skip) CursorPaginationManager > paginate > should validate limit bounds
(skip) CursorPaginationManager > paginate > should validate limit upper bound
(skip) CursorPaginationManager > paginate > should validate sort configuration
(skip) CursorPaginationManager > paginate > should handle pagination without cursor
(skip) CursorPaginationManager > paginate > should handle pagination with hasMore
(skip) CursorPaginationManager > paginate > should handle pagination with cursor
(skip) CursorPaginationManager > paginate > should apply filters to query
(skip) CursorPaginationManager > optimizePaginationQuery > should apply index hints when enabled
(skip) CursorPaginationManager > optimizePaginationQuery > should apply maxScanDocuments limit
(skip) CursorPaginationManager > optimizePaginationQuery > should apply preferred indexes
(skip) CursorPaginationManager > optimizePaginationQuery > should not modify query when no optimization options provided
(skip) CursorPaginationManager > cursor conditions > should handle simple_id cursor conditions
(skip) CursorPaginationManager > cursor conditions > should handle multi-field cursor conditions
(skip) CursorPaginationManager > edge cases > should handle missing document ID extraction
(skip) CursorPaginationManager > edge cases > should handle nested field extraction
(skip) CursorPaginationManager > edge cases > should handle missing nested fields

src/__test__/client/pagination/SortingEngine.test.ts:
(skip) SortingEngine > validateSortConfig > should validate correct sort configuration
(skip) SortingEngine > validateSortConfig > should reject empty sort configuration
(skip) SortingEngine > validateSortConfig > should reject invalid field names
(skip) SortingEngine > validateSortConfig > should reject invalid direction
(skip) SortingEngine > validateSortConfig > should reject invalid type
(skip) SortingEngine > normalizeSortConfig > should normalize sort configuration with defaults
(skip) SortingEngine > normalizeSortConfig > should preserve explicit configuration
(skip) SortingEngine > applySortToQuery > should apply single field sort to query
(skip) SortingEngine > applySortToQuery > should apply multi-field sort to query
(skip) SortingEngine > applySortToQuery > should throw error for invalid sort configuration
(skip) SortingEngine > createSortComparator > should create comparator for string sorting
(skip) SortingEngine > createSortComparator > should create comparator for number sorting
(skip) SortingEngine > createSortComparator > should create comparator for date sorting
(skip) SortingEngine > createSortComparator > should create comparator for boolean sorting
(skip) SortingEngine > createSortComparator > should handle null values with nullsFirst option
(skip) SortingEngine > createSortComparator > should handle null values without nullsFirst option
(skip) SortingEngine > createSortComparator > should handle multi-field sorting correctly
(skip) SortingEngine > createSortComparator > should handle nested field paths
(skip) SortingEngine > optimizeSortForIndexes > should prioritize indexed fields
(skip) SortingEngine > optimizeSortForIndexes > should preserve order when no indexes available
(skip) SortingEngine > getSortPerformanceHint > should return hint for no sorting
(skip) SortingEngine > getSortPerformanceHint > should return hint for single field sort
(skip) SortingEngine > getSortPerformanceHint > should return hint for multi-field sort
(skip) SortingEngine > getSortPerformanceHint > should return hint for complex sort
(skip) SortingEngine > edge cases > should handle invalid numbers gracefully
(skip) SortingEngine > edge cases > should handle invalid dates gracefully
(skip) SortingEngine > edge cases > should handle missing nested fields

src/__test__/client/pagination/Integration.test.ts:
(skip) Pagination Integration > Complete Pagination Workflow > should handle complete pagination workflow with sorting and optimization
(skip) Pagination Integration > Complete Pagination Workflow > should handle cursor-based pagination flow
(skip) Pagination Integration > Complete Pagination Workflow > should handle simple_id format workflow
(skip) Pagination Integration > Performance Optimization Integration > should integrate sorting optimization with query optimization
(skip) Pagination Integration > Performance Optimization Integration > should handle complex query optimization workflow
(skip) Pagination Integration > Multi-field Sorting Integration > should handle complex multi-field sorting with different types
(skip) Pagination Integration > Multi-field Sorting Integration > should handle nested field sorting integration
(skip) Pagination Integration > Error Handling Integration > should handle invalid configurations gracefully
(skip) Pagination Integration > Error Handling Integration > should handle cursor validation errors
(skip) Pagination Integration > Error Handling Integration > should handle pagination validation errors
(skip) Pagination Integration > Factory Function Integration > should work with factory function pattern
(skip) Pagination Integration > Real-world Scenarios > should handle e-commerce product listing scenario
(skip) Pagination Integration > Real-world Scenarios > should handle user search with filters scenario

src/__test__/client/sdk/ClientSDK.test.ts:
(skip) ClientSDK > Initialization > should create SDK instance with default config
(skip) ClientSDK > Initialization > should create SDK instance with custom config
(skip) ClientSDK > Initialization > should initialize SDK successfully
(skip) ClientSDK > Initialization > should handle initialization errors gracefully
(skip) ClientSDK > Connection Management > should connect to server
(skip) ClientSDK > Connection Management > should disconnect from server
(skip) ClientSDK > Connection Management > should handle connection without initialization
(skip) ClientSDK > Authentication > should authenticate with username and password
(skip) ClientSDK > Authentication > should authenticate with email and password
(skip) ClientSDK > Authentication > should authenticate with token
(skip) ClientSDK > Authentication > should logout successfully
(skip) ClientSDK > Authentication > should get current user
(skip) ClientSDK > Configuration Management > should get current config
(skip) ClientSDK > Configuration Management > should update config
(skip) ClientSDK > Statistics and Monitoring > should get SDK statistics
(skip) ClientSDK > Statistics and Monitoring > should track request statistics
(skip) ClientSDK > Event System > should emit and handle SDK events
(skip) ClientSDK > Event System > should unsubscribe from events
(skip) ClientSDK > Component Managers > should have all required managers
(skip) ClientSDK > Component Managers > should access collection manager
(skip) ClientSDK > Component Managers > should access file manager
(skip) ClientSDK > Component Managers > should access subscription manager
(skip) ClientSDK > Component Managers > should access cache manager
(skip) ClientSDK > Shutdown and Cleanup > should shutdown gracefully
(skip) ClientSDK > Shutdown and Cleanup > should handle multiple shutdown calls
(skip) ClientSDK > Error Handling > should handle network errors gracefully
(skip) ClientSDK > Error Handling > should track error statistics

src/__test__/client/session/SessionManager.test.ts:
(skip) SessionManager > createSession > should create a new session with valid config
(skip) SessionManager > createSession > should create session with custom sessionId
(skip) SessionManager > createSession > should create session with userId
(skip) SessionManager > createSession > should validate session config
(skip) SessionManager > createSession > should emit session_created event
(skip) SessionManager > getSession > should return session info for existing session
(skip) SessionManager > getSession > should return null for non-existent session
(skip) SessionManager > getSession > should return null for expired session
(skip) SessionManager > updateSession > should update session info
(skip) SessionManager > updateSession > should throw error for non-existent session
(skip) SessionManager > updateSession > should emit session_updated event
(skip) SessionManager > terminateSession > should terminate existing session
(skip) SessionManager > terminateSession > should not throw error for non-existent session
(skip) SessionManager > terminateSession > should emit session_terminated event
(skip) SessionManager > recoverSession > should recover suspended session
(skip) SessionManager > recoverSession > should fail to recover non-existent session
(skip) SessionManager > getActiveSessions > should return only active sessions
(skip) SessionManager > getActiveSessions > should return empty array when no active sessions
(skip) SessionManager > cleanupExpiredSessions > should clean up expired sessions
(skip) SessionManager > getSessionMetrics > should return session metrics
(skip) SessionManager > getSessionMetrics > should throw error for non-existent session
(skip) SessionManager > validateSession > should validate active session
(skip) SessionManager > validateSession > should not validate non-existent session
(skip) SessionManager > validateSession > should not validate expired session
(skip) SessionManager > updateActivity > should update session activity
(skip) SessionManager > event handling > should handle session events
(skip) SessionManager > event handling > should unsubscribe from events
(skip) SessionManager > shutdown > should shutdown cleanly

src/client/offline/__tests__/compilation.test.ts:
(skip) Phase 5.3 Day 1: Compilation Test > should import types successfully
(skip) Phase 5.3 Day 1: Compilation Test > should create instances successfully
(skip) Phase 5.3 Day 1: Compilation Test > should have correct default configurations

src/client/offline/__tests__/day1-core-infrastructure.test.ts:
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should initialize with default configuration
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should initialize with custom configuration
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should handle enable/disable offline mode
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should provide network information
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should handle event listeners
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should update configuration
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > OfflineManager > should provide storage and sync statistics
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > LocalDataCache > should initialize with default configuration
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > LocalDataCache > should handle configuration updates
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > LocalDataCache > should provide cache statistics
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > LocalDataCache > should handle export/import operations
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > StorageOptimizer > should initialize with default strategy
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > StorageOptimizer > should handle strategy changes
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > StorageOptimizer > should validate target utilization
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > StorageOptimizer > should optimize storage entries
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > StorageOptimizer > should provide optimization statistics
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > StorageOptimizer > should check if optimization is needed
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > Performance Requirements > should meet cache operation performance (<10ms)
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > Performance Requirements > should meet initialization performance requirements
(skip) Phase 5.3 Day 1: Core Offline Infrastructure > Integration Tests > should integrate OfflineManager with dependencies

src/client/offline/conflict/__tests__/day2-basic.test.ts:
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should import ConflictDetector successfully
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should import all strategies successfully
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should create strategy instances
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should detect basic conflicts
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should resolve conflicts with client-wins strategy
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should meet performance targets
(skip) Phase 5.3 Day 2: Conflict Resolution System - Basic Tests > should validate Day 2 requirements

src/client/offline/sync/__tests__/network-detector-mocks.test.ts:
(skip) NetworkDetector with Mocks > Browser Environment > should initialize successfully in browser environment
(skip) NetworkDetector with Mocks > Browser Environment > should detect online status correctly
(skip) NetworkDetector with Mocks > Browser Environment > should handle network events
(skip) NetworkDetector with Mocks > Browser Environment > should measure network latency
(skip) NetworkDetector with Mocks > Browser Environment > should test network quality
(skip) NetworkDetector with Mocks > Browser Environment > should get recommended sync strategy
(skip) NetworkDetector with Mocks > Node.js Environment > should initialize successfully in Node.js environment
(skip) NetworkDetector with Mocks > Node.js Environment > should handle missing browser APIs gracefully
(skip) NetworkDetector with Mocks > Node.js Environment > should return appropriate fallback values
(skip) NetworkDetector with Mocks > Performance Requirements > should meet initialization performance target (<100ms)
(skip) NetworkDetector with Mocks > Performance Requirements > should meet network quality test performance target (<50ms)
(skip) NetworkDetector with Mocks > Performance Requirements > should meet latency measurement performance target (<30ms)
(skip) NetworkDetector with Mocks > Error Handling > should handle fetch errors gracefully
(skip) NetworkDetector with Mocks > Error Handling > should handle timeout scenarios

src/client/offline/sync/__tests__/day3-basic.test.ts:
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should import OperationQueue successfully
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should import NetworkDetector successfully
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should import SyncManager successfully
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should initialize OperationQueue with config
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should initialize NetworkDetector with config
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should initialize SyncManager with config
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should enqueue and dequeue operations
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should meet performance targets
(skip) Phase 5.3 Day 3: Sync Management System - Basic Tests > should validate Day 3 requirements

 1 pass
 2456 skip
 0 fail
 2 expect() calls
Ran 2457 tests across 110 files. [2.54s]
